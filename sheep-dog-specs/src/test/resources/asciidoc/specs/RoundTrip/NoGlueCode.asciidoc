= Test-Suite: No Glue Code

@sheep-dog-dev
@round-trip

This maven goal generates java code without any Cucumber glue code.

== Test-Setup: Create a feature file

* Given: The spec-prj project, src/test/resources/asciidoc/specs/Process.asciidoc file is created as follows
+
----
= Test-Suite: Process

== Test-Case: Submit

* Given: The blah application, Object page is empty
----

* And: The spec-prj project, src/test/resources/asciidoc/stepdefs/blah application/Object page.asciidoc file is created as follows
+
----
= Step-Object: Object page

== Step-Definition: is empty
----

== Test-Case: Spring Java file is generated

* When: The maven plugin, asciidoctor-to-uml goal is executed

* And: The maven plugin, uml-to-junit-spring goal is executed

* Then: The code-prj project, src-gen/test/java/org/farhan/suites/blah/BlahObjectPageSteps.java file will be created as follows
+
----
package org.farhan.stepdefs.blah;

import io.cucumber.java.en.Given;
import org.farhan.common.TestSteps;
import org.farhan.objects.blah.ObjectPage;

public class BlahObjectPageSteps extends TestSteps {

    public BlahObjectPageSteps(ObjectPage object) {
        super(object, "blah", "Object");
    }

    @Given("^The blah application, Object page is empty$")
    public void isEmpty() {
        object.setInputOutputs("Empty");
    }
}
----

== Test-Case: Guice Java file is generated

* When: The maven plugin, asciidoctor-to-uml goal is executed

* And: The maven plugin, uml-to-junit-guice goal is executed

* Then: The code-prj project, src-gen/test/java/org/farhan/suites/blah/BlahObjectPageSteps.java file will be created as follows
+
----
package org.farhan.suites.umlToCode;

import com.google.inject.Guice;
import com.google.inject.Inject;
import java.util.List;
import org.farhan.common.Config2;
import org.farhan.common.TestObject;
import org.farhan.common.TestSuite;
import org.junit.jupiter.api.Test;

public class UMLBackgroundToCode extends TestSuite {

	@Inject
	private org.farhan.objects.specprj.src.test.resources.asciidoc.specs.ProcessAsciidocFile paf;
	@Inject
	private org.farhan.objects.maven.AsciidoctorToUmlGoal atug;
	@Inject
	private org.farhan.objects.maven.UmlToCucumberGoal utcg;
	@Inject
	private org.farhan.objects.codeprj.srcgen.test.resources.cucumber.specs.ProcessFeatureFile pff;

	public UMLBackgroundToCode() {
		Guice.createInjector(new Config2()).injectMembers(this);
		// injector.getInstance(ProcessAsciidocFileSteps.class);
		init(paf, "spec-prj", "src/test/resources/asciidoc/specs/Process.asciidoc");
		init(atug, "maven plugin", "asciidoctor-to-uml goal");
		init(utcg, "maven plugin", "uml-to-cucumber goal");
		init(pff, "code-prj", "src-gen/test/resources/cucumber/specs/Process.feature");
	}

	protected void isExecuted(Object object) {
		((TestObject) object).transition();
	}

	protected void isCreatedAsFollows(Object object, String path) {
		((TestObject) object).setInputOutputs("Content", getContent(path));
	}

	protected void backgroundSectionWillBeCreatedAsFollows(Object object, List<List<String>> dataTable) {
		((TestObject) object).assertInputOutputs(dataTable, "BackgroundSection");
	}

	protected void willBePresent(Object object) {
		((TestObject) object).assertInputOutputs("Present");
	}

	@Test
	public void oneStatementOneStepOneScenario() {
		// Given The spec-prj project, src/test/resources/asciidoc/specs/Process.asciidoc file is created as follows
		isCreatedAsFollows(paf, "src-gen/test/resources/junit/specs/UMLToCode/1.txt");
		// When The maven plugin, asciidoctor-to-uml goal is executed
		isExecuted(atug);
		// And The maven plugin, uml-to-cucumber goal is executed
		isExecuted(utcg);
		// Then The code-prj project, src-gen/test/resources/cucumber/specs/Process.feature file will be present
		willBePresent(pff);
		// And The code-prj project, src-gen/test/resources/cucumber/specs/Process.feature file Background section will be created as follows
		createTable();
		addRow("Setup", "Desc line 1");
		backgroundSectionWillBeCreatedAsFollows(pff, dataTable);
	}

}
----

