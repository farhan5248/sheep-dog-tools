/*
 * generated by Xtext 2.38.0
 */
package org.farhan.dsl.cucumber.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CucumberGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStepObjectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Model:
		//    Feature | StepObject;
		@Override public ParserRule getRule() { return rule; }
		
		//Feature | StepObject
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Feature
		public RuleCall getFeatureParserRuleCall_0() { return cFeatureParserRuleCall_0; }
		
		//StepObject
		public RuleCall getStepObjectParserRuleCall_1() { return cStepObjectParserRuleCall_1; }
	}
	public class StepObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.StepObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePhraseParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Assignment cStepDefinitionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStepDefinitionsStepDefinitionParserRuleCall_4_0 = (RuleCall)cStepDefinitionsAssignment_4.eContents().get(0);
		
		//StepObject:
		//    'Object:' name=Phrase EOL
		//    statements+=Statement*
		//    stepDefinitions+=StepDefinition*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Object:' name=Phrase EOL
		//statements+=Statement*
		//stepDefinitions+=StepDefinition*
		public Group getGroup() { return cGroup; }
		
		//'Object:'
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }
		
		//name=Phrase
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_1_0() { return cNamePhraseParserRuleCall_1_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
		
		//stepDefinitions+=StepDefinition*
		public Assignment getStepDefinitionsAssignment_4() { return cStepDefinitionsAssignment_4; }
		
		//StepDefinition
		public RuleCall getStepDefinitionsStepDefinitionParserRuleCall_4_0() { return cStepDefinitionsStepDefinitionParserRuleCall_4_0; }
	}
	public class StepDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.StepDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefinitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePhraseParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Assignment cStepParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStepParametersStepParametersParserRuleCall_4_0 = (RuleCall)cStepParametersAssignment_4.eContents().get(0);
		
		//StepDefinition:
		//    'Definition:' name=Phrase EOL
		//    statements+=Statement*
		//    stepParameters+=StepParameters*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Definition:' name=Phrase EOL
		//statements+=Statement*
		//stepParameters+=StepParameters*
		public Group getGroup() { return cGroup; }
		
		//'Definition:'
		public Keyword getDefinitionKeyword_0() { return cDefinitionKeyword_0; }
		
		//name=Phrase
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_1_0() { return cNamePhraseParserRuleCall_1_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
		
		//stepParameters+=StepParameters*
		public Assignment getStepParametersAssignment_4() { return cStepParametersAssignment_4; }
		
		//StepParameters
		public RuleCall getStepParametersStepParametersParserRuleCall_4_0() { return cStepParametersStepParametersParserRuleCall_4_0; }
	}
	public class StepParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.StepParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParametersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePhraseParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Assignment cParametersTableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersTableParametersTableParserRuleCall_4_0 = (RuleCall)cParametersTableAssignment_4.eContents().get(0);
		
		//StepParameters:
		//    'Parameters:' name=Phrase EOL
		//    statements+=Statement*
		//    parametersTable=ParametersTable;
		@Override public ParserRule getRule() { return rule; }
		
		//'Parameters:' name=Phrase EOL
		//statements+=Statement*
		//parametersTable=ParametersTable
		public Group getGroup() { return cGroup; }
		
		//'Parameters:'
		public Keyword getParametersKeyword_0() { return cParametersKeyword_0; }
		
		//name=Phrase
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_1_0() { return cNamePhraseParserRuleCall_1_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
		
		//parametersTable=ParametersTable
		public Assignment getParametersTableAssignment_4() { return cParametersTableAssignment_4; }
		
		//ParametersTable
		public RuleCall getParametersTableParametersTableParserRuleCall_4_0() { return cParametersTableParametersTableParserRuleCall_4_0; }
	}
	public class ParametersTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.ParametersTable");
		private final Assignment cRowsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRowsRowParserRuleCall_0 = (RuleCall)cRowsAssignment.eContents().get(0);
		
		//ParametersTable:
		//    rows+=Row+;
		@Override public ParserRule getRule() { return rule; }
		
		//rows+=Row+
		public Assignment getRowsAssignment() { return cRowsAssignment; }
		
		//Row
		public RuleCall getRowsRowParserRuleCall_0() { return cRowsRowParserRuleCall_0; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cTagsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTagsTagParserRuleCall_0_0_0 = (RuleCall)cTagsAssignment_0_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cFeatureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamePhraseParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Assignment cAbstractScenariosAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAbstractScenariosAbstractScenarioParserRuleCall_5_0 = (RuleCall)cAbstractScenariosAssignment_5.eContents().get(0);
		
		//Feature:
		//    (tags+=Tag+ EOL)?
		//    'Feature:' name=Phrase EOL
		//    statements+=Statement*
		//    abstractScenarios+=AbstractScenario*;
		@Override public ParserRule getRule() { return rule; }
		
		//(tags+=Tag+ EOL)?
		//'Feature:' name=Phrase EOL
		//statements+=Statement*
		//abstractScenarios+=AbstractScenario*
		public Group getGroup() { return cGroup; }
		
		//(tags+=Tag+ EOL)?
		public Group getGroup_0() { return cGroup_0; }
		
		//tags+=Tag+
		public Assignment getTagsAssignment_0_0() { return cTagsAssignment_0_0; }
		
		//Tag
		public RuleCall getTagsTagParserRuleCall_0_0_0() { return cTagsTagParserRuleCall_0_0_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_0_1() { return cEOLTerminalRuleCall_0_1; }
		
		//'Feature:'
		public Keyword getFeatureKeyword_1() { return cFeatureKeyword_1; }
		
		//name=Phrase
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_2_0() { return cNamePhraseParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
		
		//abstractScenarios+=AbstractScenario*
		public Assignment getAbstractScenariosAssignment_5() { return cAbstractScenariosAssignment_5; }
		
		//AbstractScenario
		public RuleCall getAbstractScenariosAbstractScenarioParserRuleCall_5_0() { return cAbstractScenariosAbstractScenarioParserRuleCall_5_0; }
	}
	public class AbstractScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.AbstractScenario");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBackgroundParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScenarioParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cScenarioOutlineParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// TODO add parameters to step, cell, line tokens
		//// This has the side effect of allowing more than 1 Background.
		//// Also it allows it to be anywhere, like at the begining or end.
		//// I'm doing it this way to make the formatting code simpler by having less duplication
		//AbstractScenario:
		//    Background | Scenario | ScenarioOutline;
		@Override public ParserRule getRule() { return rule; }
		
		//Background | Scenario | ScenarioOutline
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Background
		public RuleCall getBackgroundParserRuleCall_0() { return cBackgroundParserRuleCall_0; }
		
		//Scenario
		public RuleCall getScenarioParserRuleCall_1() { return cScenarioParserRuleCall_1; }
		
		//ScenarioOutline
		public RuleCall getScenarioOutlineParserRuleCall_2() { return cScenarioOutlineParserRuleCall_2; }
	}
	public class BackgroundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.Background");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackgroundKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePhraseParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Assignment cStepsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStepsStepParserRuleCall_4_0 = (RuleCall)cStepsAssignment_4.eContents().get(0);
		
		//Background:
		//    'Background:' name=Phrase EOL
		//    statements+=Statement*
		//    steps+=Step*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Background:' name=Phrase EOL
		//statements+=Statement*
		//steps+=Step*
		public Group getGroup() { return cGroup; }
		
		//'Background:'
		public Keyword getBackgroundKeyword_0() { return cBackgroundKeyword_0; }
		
		//name=Phrase
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_1_0() { return cNamePhraseParserRuleCall_1_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
		
		//steps+=Step*
		public Assignment getStepsAssignment_4() { return cStepsAssignment_4; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_4_0() { return cStepsStepParserRuleCall_4_0; }
	}
	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cTagsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTagsTagParserRuleCall_0_0_0 = (RuleCall)cTagsAssignment_0_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cScenarioKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamePhraseParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Assignment cStepsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStepsStepParserRuleCall_5_0 = (RuleCall)cStepsAssignment_5.eContents().get(0);
		
		//Scenario:
		//    (tags+=Tag+ EOL)?
		//    'Scenario:' name=Phrase EOL
		//    statements+=Statement*
		//    steps+=Step*;
		@Override public ParserRule getRule() { return rule; }
		
		//(tags+=Tag+ EOL)?
		//'Scenario:' name=Phrase EOL
		//statements+=Statement*
		//steps+=Step*
		public Group getGroup() { return cGroup; }
		
		//(tags+=Tag+ EOL)?
		public Group getGroup_0() { return cGroup_0; }
		
		//tags+=Tag+
		public Assignment getTagsAssignment_0_0() { return cTagsAssignment_0_0; }
		
		//Tag
		public RuleCall getTagsTagParserRuleCall_0_0_0() { return cTagsTagParserRuleCall_0_0_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_0_1() { return cEOLTerminalRuleCall_0_1; }
		
		//'Scenario:'
		public Keyword getScenarioKeyword_1() { return cScenarioKeyword_1; }
		
		//name=Phrase
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_2_0() { return cNamePhraseParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
		
		//steps+=Step*
		public Assignment getStepsAssignment_5() { return cStepsAssignment_5; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_5_0() { return cStepsStepParserRuleCall_5_0; }
	}
	public class ScenarioOutlineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.ScenarioOutline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cTagsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTagsTagParserRuleCall_0_0_0 = (RuleCall)cTagsAssignment_0_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cScenarioOutlineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamePhraseParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Assignment cStepsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStepsStepParserRuleCall_5_0 = (RuleCall)cStepsAssignment_5.eContents().get(0);
		private final Assignment cExamplesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExamplesExamplesParserRuleCall_6_0 = (RuleCall)cExamplesAssignment_6.eContents().get(0);
		
		//ScenarioOutline:
		//    (tags+=Tag+ EOL)?
		//    'Scenario Outline:' name=Phrase EOL
		//    statements+=Statement*
		//    steps+=Step*
		//    examples+=Examples+;
		@Override public ParserRule getRule() { return rule; }
		
		//(tags+=Tag+ EOL)?
		//'Scenario Outline:' name=Phrase EOL
		//statements+=Statement*
		//steps+=Step*
		//examples+=Examples+
		public Group getGroup() { return cGroup; }
		
		//(tags+=Tag+ EOL)?
		public Group getGroup_0() { return cGroup_0; }
		
		//tags+=Tag+
		public Assignment getTagsAssignment_0_0() { return cTagsAssignment_0_0; }
		
		//Tag
		public RuleCall getTagsTagParserRuleCall_0_0_0() { return cTagsTagParserRuleCall_0_0_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_0_1() { return cEOLTerminalRuleCall_0_1; }
		
		//'Scenario Outline:'
		public Keyword getScenarioOutlineKeyword_1() { return cScenarioOutlineKeyword_1; }
		
		//name=Phrase
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_2_0() { return cNamePhraseParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
		
		//steps+=Step*
		public Assignment getStepsAssignment_5() { return cStepsAssignment_5; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_5_0() { return cStepsStepParserRuleCall_5_0; }
		
		//examples+=Examples+
		public Assignment getExamplesAssignment_6() { return cExamplesAssignment_6; }
		
		//Examples
		public RuleCall getExamplesExamplesParserRuleCall_6_0() { return cExamplesExamplesParserRuleCall_6_0; }
	}
	public class ExamplesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.Examples");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cTagsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTagsTagParserRuleCall_0_0_0 = (RuleCall)cTagsAssignment_0_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cExamplesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamePhraseParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Assignment cTheExamplesTableAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTheExamplesTableExamplesTableParserRuleCall_5_0 = (RuleCall)cTheExamplesTableAssignment_5.eContents().get(0);
		
		//Examples:
		//    (tags+=Tag+ EOL)?
		//    'Examples:' name=Phrase EOL
		//    statements+=Statement*
		//    theExamplesTable=ExamplesTable;
		@Override public ParserRule getRule() { return rule; }
		
		//(tags+=Tag+ EOL)?
		//'Examples:' name=Phrase EOL
		//statements+=Statement*
		//theExamplesTable=ExamplesTable
		public Group getGroup() { return cGroup; }
		
		//(tags+=Tag+ EOL)?
		public Group getGroup_0() { return cGroup_0; }
		
		//tags+=Tag+
		public Assignment getTagsAssignment_0_0() { return cTagsAssignment_0_0; }
		
		//Tag
		public RuleCall getTagsTagParserRuleCall_0_0_0() { return cTagsTagParserRuleCall_0_0_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_0_1() { return cEOLTerminalRuleCall_0_1; }
		
		//'Examples:'
		public Keyword getExamplesKeyword_1() { return cExamplesKeyword_1; }
		
		//name=Phrase
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_2_0() { return cNamePhraseParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
		
		//theExamplesTable=ExamplesTable
		public Assignment getTheExamplesTableAssignment_5() { return cTheExamplesTableAssignment_5; }
		
		//ExamplesTable
		public RuleCall getTheExamplesTableExamplesTableParserRuleCall_5_0() { return cTheExamplesTableExamplesTableParserRuleCall_5_0; }
	}
	public class ExamplesTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.ExamplesTable");
		private final Assignment cRowsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRowsRowParserRuleCall_0 = (RuleCall)cRowsAssignment.eContents().get(0);
		
		//ExamplesTable:
		//    rows+=Row+;
		@Override public ParserRule getRule() { return rule; }
		
		//rows+=Row+
		public Assignment getRowsAssignment() { return cRowsAssignment; }
		
		//Row
		public RuleCall getRowsRowParserRuleCall_0() { return cRowsRowParserRuleCall_0; }
	}
	public class StepTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.StepTable");
		private final Assignment cRowsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRowsRowParserRuleCall_0 = (RuleCall)cRowsAssignment.eContents().get(0);
		
		//StepTable:
		//    rows+=Row+;
		@Override public ParserRule getRule() { return rule; }
		
		//rows+=Row+
		public Assignment getRowsAssignment() { return cRowsAssignment; }
		
		//Row
		public RuleCall getRowsRowParserRuleCall_0() { return cRowsRowParserRuleCall_0; }
	}
	public class RowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.Row");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCellsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCellsCellParserRuleCall_0_0 = (RuleCall)cCellsAssignment_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Row:
		//    cells+=Cell+ '|' EOL;
		@Override public ParserRule getRule() { return rule; }
		
		//cells+=Cell+ '|' EOL
		public Group getGroup() { return cGroup; }
		
		//cells+=Cell+
		public Assignment getCellsAssignment_0() { return cCellsAssignment_0; }
		
		//Cell
		public RuleCall getCellsCellParserRuleCall_0_0() { return cCellsCellParserRuleCall_0_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1() { return cVerticalLineKeyword_1; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }
	}
	public class CellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.Cell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePhraseParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Cell:
		//    '|' name=Phrase;
		@Override public ParserRule getRule() { return rule; }
		
		//'|' name=Phrase
		public Group getGroup() { return cGroup; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }
		
		//name=Phrase
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_1_0() { return cNamePhraseParserRuleCall_1_0; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.Step");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGivenParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWhenParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cThenParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAndParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cButParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAsteriskParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Step:
		//    Given | When | Then | And | But | Asterisk;
		@Override public ParserRule getRule() { return rule; }
		
		//Given | When | Then | And | But | Asterisk
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Given
		public RuleCall getGivenParserRuleCall_0() { return cGivenParserRuleCall_0; }
		
		//When
		public RuleCall getWhenParserRuleCall_1() { return cWhenParserRuleCall_1; }
		
		//Then
		public RuleCall getThenParserRuleCall_2() { return cThenParserRuleCall_2; }
		
		//And
		public RuleCall getAndParserRuleCall_3() { return cAndParserRuleCall_3; }
		
		//But
		public RuleCall getButParserRuleCall_4() { return cButParserRuleCall_4; }
		
		//Asterisk
		public RuleCall getAsteriskParserRuleCall_5() { return cAsteriskParserRuleCall_5; }
	}
	public class DocStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.DocString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuotationMarkQuotationMarkQuotationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cLinesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLinesLineParserRuleCall_2_0 = (RuleCall)cLinesAssignment_2.eContents().get(0);
		private final Keyword cQuotationMarkQuotationMarkQuotationMarkKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cEOLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//DocString:
		//    '"""' EOL
		//    lines+=Line+
		//    '"""' EOL;
		@Override public ParserRule getRule() { return rule; }
		
		//'"""' EOL
		//lines+=Line+
		//'"""' EOL
		public Group getGroup() { return cGroup; }
		
		//'"""'
		public Keyword getQuotationMarkQuotationMarkQuotationMarkKeyword_0() { return cQuotationMarkQuotationMarkQuotationMarkKeyword_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }
		
		//lines+=Line+
		public Assignment getLinesAssignment_2() { return cLinesAssignment_2; }
		
		//Line
		public RuleCall getLinesLineParserRuleCall_2_0() { return cLinesLineParserRuleCall_2_0; }
		
		//'"""'
		public Keyword getQuotationMarkQuotationMarkQuotationMarkKeyword_3() { return cQuotationMarkQuotationMarkQuotationMarkKeyword_3; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_4() { return cEOLTerminalRuleCall_4; }
	}
	public class GivenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.Given");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGivenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePhraseParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTheStepTableAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cTheStepTableStepTableParserRuleCall_3_0_0 = (RuleCall)cTheStepTableAssignment_3_0.eContents().get(0);
		private final Assignment cTheDocStringAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cTheDocStringDocStringParserRuleCall_3_1_0 = (RuleCall)cTheDocStringAssignment_3_1.eContents().get(0);
		
		//Given:
		//    'Given' name=Phrase EOL
		//    (theStepTable=StepTable | theDocString=DocString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Given' name=Phrase EOL
		//(theStepTable=StepTable | theDocString=DocString)?
		public Group getGroup() { return cGroup; }
		
		//'Given'
		public Keyword getGivenKeyword_0() { return cGivenKeyword_0; }
		
		//name=Phrase
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_1_0() { return cNamePhraseParserRuleCall_1_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }
		
		//(theStepTable=StepTable | theDocString=DocString)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//theStepTable=StepTable
		public Assignment getTheStepTableAssignment_3_0() { return cTheStepTableAssignment_3_0; }
		
		//StepTable
		public RuleCall getTheStepTableStepTableParserRuleCall_3_0_0() { return cTheStepTableStepTableParserRuleCall_3_0_0; }
		
		//theDocString=DocString
		public Assignment getTheDocStringAssignment_3_1() { return cTheDocStringAssignment_3_1; }
		
		//DocString
		public RuleCall getTheDocStringDocStringParserRuleCall_3_1_0() { return cTheDocStringDocStringParserRuleCall_3_1_0; }
	}
	public class WhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.When");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePhraseParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTheStepTableAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cTheStepTableStepTableParserRuleCall_3_0_0 = (RuleCall)cTheStepTableAssignment_3_0.eContents().get(0);
		private final Assignment cTheDocStringAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cTheDocStringDocStringParserRuleCall_3_1_0 = (RuleCall)cTheDocStringAssignment_3_1.eContents().get(0);
		
		//When:
		//    'When' name=Phrase EOL
		//    (theStepTable=StepTable | theDocString=DocString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'When' name=Phrase EOL
		//(theStepTable=StepTable | theDocString=DocString)?
		public Group getGroup() { return cGroup; }
		
		//'When'
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }
		
		//name=Phrase
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_1_0() { return cNamePhraseParserRuleCall_1_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }
		
		//(theStepTable=StepTable | theDocString=DocString)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//theStepTable=StepTable
		public Assignment getTheStepTableAssignment_3_0() { return cTheStepTableAssignment_3_0; }
		
		//StepTable
		public RuleCall getTheStepTableStepTableParserRuleCall_3_0_0() { return cTheStepTableStepTableParserRuleCall_3_0_0; }
		
		//theDocString=DocString
		public Assignment getTheDocStringAssignment_3_1() { return cTheDocStringAssignment_3_1; }
		
		//DocString
		public RuleCall getTheDocStringDocStringParserRuleCall_3_1_0() { return cTheDocStringDocStringParserRuleCall_3_1_0; }
	}
	public class ThenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.Then");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePhraseParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTheStepTableAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cTheStepTableStepTableParserRuleCall_3_0_0 = (RuleCall)cTheStepTableAssignment_3_0.eContents().get(0);
		private final Assignment cTheDocStringAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cTheDocStringDocStringParserRuleCall_3_1_0 = (RuleCall)cTheDocStringAssignment_3_1.eContents().get(0);
		
		//Then:
		//    'Then' name=Phrase EOL
		//    (theStepTable=StepTable | theDocString=DocString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Then' name=Phrase EOL
		//(theStepTable=StepTable | theDocString=DocString)?
		public Group getGroup() { return cGroup; }
		
		//'Then'
		public Keyword getThenKeyword_0() { return cThenKeyword_0; }
		
		//name=Phrase
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_1_0() { return cNamePhraseParserRuleCall_1_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }
		
		//(theStepTable=StepTable | theDocString=DocString)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//theStepTable=StepTable
		public Assignment getTheStepTableAssignment_3_0() { return cTheStepTableAssignment_3_0; }
		
		//StepTable
		public RuleCall getTheStepTableStepTableParserRuleCall_3_0_0() { return cTheStepTableStepTableParserRuleCall_3_0_0; }
		
		//theDocString=DocString
		public Assignment getTheDocStringAssignment_3_1() { return cTheDocStringAssignment_3_1; }
		
		//DocString
		public RuleCall getTheDocStringDocStringParserRuleCall_3_1_0() { return cTheDocStringDocStringParserRuleCall_3_1_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePhraseParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTheStepTableAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cTheStepTableStepTableParserRuleCall_3_0_0 = (RuleCall)cTheStepTableAssignment_3_0.eContents().get(0);
		private final Assignment cTheDocStringAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cTheDocStringDocStringParserRuleCall_3_1_0 = (RuleCall)cTheDocStringAssignment_3_1.eContents().get(0);
		
		//And:
		//    'And' name=Phrase EOL
		//    (theStepTable=StepTable | theDocString=DocString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'And' name=Phrase EOL
		//(theStepTable=StepTable | theDocString=DocString)?
		public Group getGroup() { return cGroup; }
		
		//'And'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//name=Phrase
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_1_0() { return cNamePhraseParserRuleCall_1_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }
		
		//(theStepTable=StepTable | theDocString=DocString)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//theStepTable=StepTable
		public Assignment getTheStepTableAssignment_3_0() { return cTheStepTableAssignment_3_0; }
		
		//StepTable
		public RuleCall getTheStepTableStepTableParserRuleCall_3_0_0() { return cTheStepTableStepTableParserRuleCall_3_0_0; }
		
		//theDocString=DocString
		public Assignment getTheDocStringAssignment_3_1() { return cTheDocStringAssignment_3_1; }
		
		//DocString
		public RuleCall getTheDocStringDocStringParserRuleCall_3_1_0() { return cTheDocStringDocStringParserRuleCall_3_1_0; }
	}
	public class ButElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.But");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePhraseParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTheStepTableAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cTheStepTableStepTableParserRuleCall_3_0_0 = (RuleCall)cTheStepTableAssignment_3_0.eContents().get(0);
		private final Assignment cTheDocStringAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cTheDocStringDocStringParserRuleCall_3_1_0 = (RuleCall)cTheDocStringAssignment_3_1.eContents().get(0);
		
		//But:
		//    'But' name=Phrase EOL
		//    (theStepTable=StepTable | theDocString=DocString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'But' name=Phrase EOL
		//(theStepTable=StepTable | theDocString=DocString)?
		public Group getGroup() { return cGroup; }
		
		//'But'
		public Keyword getButKeyword_0() { return cButKeyword_0; }
		
		//name=Phrase
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_1_0() { return cNamePhraseParserRuleCall_1_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }
		
		//(theStepTable=StepTable | theDocString=DocString)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//theStepTable=StepTable
		public Assignment getTheStepTableAssignment_3_0() { return cTheStepTableAssignment_3_0; }
		
		//StepTable
		public RuleCall getTheStepTableStepTableParserRuleCall_3_0_0() { return cTheStepTableStepTableParserRuleCall_3_0_0; }
		
		//theDocString=DocString
		public Assignment getTheDocStringAssignment_3_1() { return cTheDocStringAssignment_3_1; }
		
		//DocString
		public RuleCall getTheDocStringDocStringParserRuleCall_3_1_0() { return cTheDocStringDocStringParserRuleCall_3_1_0; }
	}
	public class AsteriskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.Asterisk");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePhraseParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTheStepTableAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cTheStepTableStepTableParserRuleCall_3_0_0 = (RuleCall)cTheStepTableAssignment_3_0.eContents().get(0);
		private final Assignment cTheDocStringAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cTheDocStringDocStringParserRuleCall_3_1_0 = (RuleCall)cTheDocStringAssignment_3_1.eContents().get(0);
		
		//Asterisk:
		//    '*' name=Phrase EOL
		//    (theStepTable=StepTable | theDocString=DocString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' name=Phrase EOL
		//(theStepTable=StepTable | theDocString=DocString)?
		public Group getGroup() { return cGroup; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//name=Phrase
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_1_0() { return cNamePhraseParserRuleCall_1_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }
		
		//(theStepTable=StepTable | theDocString=DocString)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//theStepTable=StepTable
		public Assignment getTheStepTableAssignment_3_0() { return cTheStepTableAssignment_3_0; }
		
		//StepTable
		public RuleCall getTheStepTableStepTableParserRuleCall_3_0_0() { return cTheStepTableStepTableParserRuleCall_3_0_0; }
		
		//theDocString=DocString
		public Assignment getTheDocStringAssignment_3_1() { return cTheDocStringAssignment_3_1; }
		
		//DocString
		public RuleCall getTheDocStringDocStringParserRuleCall_3_1_0() { return cTheDocStringDocStringParserRuleCall_3_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamePhraseParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Statement:
		//    name=Phrase EOL;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Phrase EOL
		public Group getGroup() { return cGroup; }
		
		//name=Phrase
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_0_0() { return cNamePhraseParserRuleCall_0_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }
	}
	public class PhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.Phrase");
		private final RuleCall cTEXT_LITERALParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Phrase:
		//    TEXT_LITERAL+;
		@Override public ParserRule getRule() { return rule; }
		
		//TEXT_LITERAL+
		public RuleCall getTEXT_LITERALParserRuleCall() { return cTEXT_LITERALParserRuleCall; }
	}
	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.Tag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Tag:
		//    '@' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' name=ID
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class LineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameLineBitsParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Line:
		//    name=LineBits EOL;
		@Override public ParserRule getRule() { return rule; }
		
		//name=LineBits EOL
		public Group getGroup() { return cGroup; }
		
		//name=LineBits
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//LineBits
		public RuleCall getNameLineBitsParserRuleCall_0_0() { return cNameLineBitsParserRuleCall_0_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }
	}
	public class LineBitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.LineBits");
		private final RuleCall cTEXT_LITERALParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LineBits:
		//    TEXT_LITERAL*;
		@Override public ParserRule getRule() { return rule; }
		
		//TEXT_LITERAL*
		public RuleCall getTEXT_LITERALParserRuleCall() { return cTEXT_LITERALParserRuleCall; }
	}
	public class TEXT_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.TEXT_LITERAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWORDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TEXT_LITERAL:
		//    WORD
		//    | ID
		//    | STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//WORD
		//| ID
		//| STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WORD
		public RuleCall getWORDTerminalRuleCall_0() { return cWORDTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}
	
	
	private final ModelElements pModel;
	private final StepObjectElements pStepObject;
	private final StepDefinitionElements pStepDefinition;
	private final StepParametersElements pStepParameters;
	private final ParametersTableElements pParametersTable;
	private final FeatureElements pFeature;
	private final AbstractScenarioElements pAbstractScenario;
	private final BackgroundElements pBackground;
	private final ScenarioElements pScenario;
	private final ScenarioOutlineElements pScenarioOutline;
	private final ExamplesElements pExamples;
	private final ExamplesTableElements pExamplesTable;
	private final StepTableElements pStepTable;
	private final RowElements pRow;
	private final CellElements pCell;
	private final StepElements pStep;
	private final DocStringElements pDocString;
	private final GivenElements pGiven;
	private final WhenElements pWhen;
	private final ThenElements pThen;
	private final AndElements pAnd;
	private final ButElements pBut;
	private final AsteriskElements pAsterisk;
	private final StatementElements pStatement;
	private final PhraseElements pPhrase;
	private final TagElements pTag;
	private final LineElements pLine;
	private final LineBitsElements pLineBits;
	private final TEXT_LITERALElements pTEXT_LITERAL;
	private final TerminalRule tID;
	private final TerminalRule tWORD;
	private final TerminalRule tSTRING;
	private final TerminalRule tWS;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tEOL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CucumberGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pStepObject = new StepObjectElements();
		this.pStepDefinition = new StepDefinitionElements();
		this.pStepParameters = new StepParametersElements();
		this.pParametersTable = new ParametersTableElements();
		this.pFeature = new FeatureElements();
		this.pAbstractScenario = new AbstractScenarioElements();
		this.pBackground = new BackgroundElements();
		this.pScenario = new ScenarioElements();
		this.pScenarioOutline = new ScenarioOutlineElements();
		this.pExamples = new ExamplesElements();
		this.pExamplesTable = new ExamplesTableElements();
		this.pStepTable = new StepTableElements();
		this.pRow = new RowElements();
		this.pCell = new CellElements();
		this.pStep = new StepElements();
		this.pDocString = new DocStringElements();
		this.pGiven = new GivenElements();
		this.pWhen = new WhenElements();
		this.pThen = new ThenElements();
		this.pAnd = new AndElements();
		this.pBut = new ButElements();
		this.pAsterisk = new AsteriskElements();
		this.pStatement = new StatementElements();
		this.pPhrase = new PhraseElements();
		this.pTag = new TagElements();
		this.pLine = new LineElements();
		this.pLineBits = new LineBitsElements();
		this.pTEXT_LITERAL = new TEXT_LITERALElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.ID");
		this.tWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.WORD");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.STRING");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.WS");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.SL_COMMENT");
		this.tEOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.dsl.cucumber.Cucumber.EOL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.farhan.dsl.cucumber.Cucumber".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    Feature | StepObject;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//StepObject:
	//    'Object:' name=Phrase EOL
	//    statements+=Statement*
	//    stepDefinitions+=StepDefinition*;
	public StepObjectElements getStepObjectAccess() {
		return pStepObject;
	}
	
	public ParserRule getStepObjectRule() {
		return getStepObjectAccess().getRule();
	}
	
	//StepDefinition:
	//    'Definition:' name=Phrase EOL
	//    statements+=Statement*
	//    stepParameters+=StepParameters*;
	public StepDefinitionElements getStepDefinitionAccess() {
		return pStepDefinition;
	}
	
	public ParserRule getStepDefinitionRule() {
		return getStepDefinitionAccess().getRule();
	}
	
	//StepParameters:
	//    'Parameters:' name=Phrase EOL
	//    statements+=Statement*
	//    parametersTable=ParametersTable;
	public StepParametersElements getStepParametersAccess() {
		return pStepParameters;
	}
	
	public ParserRule getStepParametersRule() {
		return getStepParametersAccess().getRule();
	}
	
	//ParametersTable:
	//    rows+=Row+;
	public ParametersTableElements getParametersTableAccess() {
		return pParametersTable;
	}
	
	public ParserRule getParametersTableRule() {
		return getParametersTableAccess().getRule();
	}
	
	//Feature:
	//    (tags+=Tag+ EOL)?
	//    'Feature:' name=Phrase EOL
	//    statements+=Statement*
	//    abstractScenarios+=AbstractScenario*;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//// TODO add parameters to step, cell, line tokens
	//// This has the side effect of allowing more than 1 Background.
	//// Also it allows it to be anywhere, like at the begining or end.
	//// I'm doing it this way to make the formatting code simpler by having less duplication
	//AbstractScenario:
	//    Background | Scenario | ScenarioOutline;
	public AbstractScenarioElements getAbstractScenarioAccess() {
		return pAbstractScenario;
	}
	
	public ParserRule getAbstractScenarioRule() {
		return getAbstractScenarioAccess().getRule();
	}
	
	//Background:
	//    'Background:' name=Phrase EOL
	//    statements+=Statement*
	//    steps+=Step*;
	public BackgroundElements getBackgroundAccess() {
		return pBackground;
	}
	
	public ParserRule getBackgroundRule() {
		return getBackgroundAccess().getRule();
	}
	
	//Scenario:
	//    (tags+=Tag+ EOL)?
	//    'Scenario:' name=Phrase EOL
	//    statements+=Statement*
	//    steps+=Step*;
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}
	
	//ScenarioOutline:
	//    (tags+=Tag+ EOL)?
	//    'Scenario Outline:' name=Phrase EOL
	//    statements+=Statement*
	//    steps+=Step*
	//    examples+=Examples+;
	public ScenarioOutlineElements getScenarioOutlineAccess() {
		return pScenarioOutline;
	}
	
	public ParserRule getScenarioOutlineRule() {
		return getScenarioOutlineAccess().getRule();
	}
	
	//Examples:
	//    (tags+=Tag+ EOL)?
	//    'Examples:' name=Phrase EOL
	//    statements+=Statement*
	//    theExamplesTable=ExamplesTable;
	public ExamplesElements getExamplesAccess() {
		return pExamples;
	}
	
	public ParserRule getExamplesRule() {
		return getExamplesAccess().getRule();
	}
	
	//ExamplesTable:
	//    rows+=Row+;
	public ExamplesTableElements getExamplesTableAccess() {
		return pExamplesTable;
	}
	
	public ParserRule getExamplesTableRule() {
		return getExamplesTableAccess().getRule();
	}
	
	//StepTable:
	//    rows+=Row+;
	public StepTableElements getStepTableAccess() {
		return pStepTable;
	}
	
	public ParserRule getStepTableRule() {
		return getStepTableAccess().getRule();
	}
	
	//Row:
	//    cells+=Cell+ '|' EOL;
	public RowElements getRowAccess() {
		return pRow;
	}
	
	public ParserRule getRowRule() {
		return getRowAccess().getRule();
	}
	
	//Cell:
	//    '|' name=Phrase;
	public CellElements getCellAccess() {
		return pCell;
	}
	
	public ParserRule getCellRule() {
		return getCellAccess().getRule();
	}
	
	//Step:
	//    Given | When | Then | And | But | Asterisk;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//DocString:
	//    '"""' EOL
	//    lines+=Line+
	//    '"""' EOL;
	public DocStringElements getDocStringAccess() {
		return pDocString;
	}
	
	public ParserRule getDocStringRule() {
		return getDocStringAccess().getRule();
	}
	
	//Given:
	//    'Given' name=Phrase EOL
	//    (theStepTable=StepTable | theDocString=DocString)?;
	public GivenElements getGivenAccess() {
		return pGiven;
	}
	
	public ParserRule getGivenRule() {
		return getGivenAccess().getRule();
	}
	
	//When:
	//    'When' name=Phrase EOL
	//    (theStepTable=StepTable | theDocString=DocString)?;
	public WhenElements getWhenAccess() {
		return pWhen;
	}
	
	public ParserRule getWhenRule() {
		return getWhenAccess().getRule();
	}
	
	//Then:
	//    'Then' name=Phrase EOL
	//    (theStepTable=StepTable | theDocString=DocString)?;
	public ThenElements getThenAccess() {
		return pThen;
	}
	
	public ParserRule getThenRule() {
		return getThenAccess().getRule();
	}
	
	//And:
	//    'And' name=Phrase EOL
	//    (theStepTable=StepTable | theDocString=DocString)?;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//But:
	//    'But' name=Phrase EOL
	//    (theStepTable=StepTable | theDocString=DocString)?;
	public ButElements getButAccess() {
		return pBut;
	}
	
	public ParserRule getButRule() {
		return getButAccess().getRule();
	}
	
	//Asterisk:
	//    '*' name=Phrase EOL
	//    (theStepTable=StepTable | theDocString=DocString)?;
	public AsteriskElements getAsteriskAccess() {
		return pAsterisk;
	}
	
	public ParserRule getAsteriskRule() {
		return getAsteriskAccess().getRule();
	}
	
	//Statement:
	//    name=Phrase EOL;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Phrase:
	//    TEXT_LITERAL+;
	public PhraseElements getPhraseAccess() {
		return pPhrase;
	}
	
	public ParserRule getPhraseRule() {
		return getPhraseAccess().getRule();
	}
	
	//Tag:
	//    '@' name=ID;
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}
	
	//Line:
	//    name=LineBits EOL;
	public LineElements getLineAccess() {
		return pLine;
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}
	
	//LineBits:
	//    TEXT_LITERAL*;
	public LineBitsElements getLineBitsAccess() {
		return pLineBits;
	}
	
	public ParserRule getLineBitsRule() {
		return getLineBitsAccess().getRule();
	}
	
	//TEXT_LITERAL:
	//    WORD
	//    | ID
	//    | STRING;
	public TEXT_LITERALElements getTEXT_LITERALAccess() {
		return pTEXT_LITERAL;
	}
	
	public ParserRule getTEXT_LITERALRule() {
		return getTEXT_LITERALAccess().getRule();
	}
	
	//@Override
	//terminal ID:
	//    ('0'..'9' | 'a'..'z' | 'A'..'Z' | '_' | '-' | '.')+;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal WORD:
	//    !('@' | '|' | ' ' | '\t' | '\n' | '\r')
	//    !(' ' | '\t' | '\n' | '\r')*;
	public TerminalRule getWORDRule() {
		return tWORD;
	}
	
	//// Not sure how this is helping, will remove it
	//@Override
	//terminal STRING:
	//    '"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"' | '\r' | '\n'))* '"' |
	//    "'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'" | '\r' | '\n'))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//@Override
	//terminal WS:
	//    (' ' | '\t' | '\r')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//// single line comment
	//@Override
	//terminal SL_COMMENT:
	//    '#' !('\n')* EOL;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal EOL:
	//    ('\n')+;
	public TerminalRule getEOLRule() {
		return tEOL;
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
