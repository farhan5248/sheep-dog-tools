/*
 * generated by Xtext 2.36.0
 */
package org.farhan.dsl.sheepdog.validation;

import java.io.PrintWriter;
import java.io.StringWriter;

import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;
import org.farhan.dsl.sheepdog.LanguageAccessImpl;
import org.farhan.dsl.sheepdog.sheepDog.TestStepContainer;
import org.farhan.dsl.sheepdog.sheepDog.Cell;
import org.farhan.dsl.sheepdog.sheepDog.SheepDogPackage;
import org.farhan.dsl.sheepdog.sheepDog.TestSuite;
import org.farhan.dsl.sheepdog.sheepDog.TestStep;
import org.farhan.dsl.sheepdog.sheepDog.Table;
import org.farhan.helper.StepDefinitionHelper;

/**
 * This class contains custom validation rules.
 *
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class SheepDogValidator extends AbstractSheepDogValidator {

	public static final String INVALID_NAME = "invalidName";
	public static final String INVALID_HEADER = "invalidHeader";
	public static final String INVALID_STEP_TYPE = "invalidStepType";
	public static final String MISSING_STEP_DEF = "missingStepDefinition";
	public static final String MISSING_COMPONENT = "missingInitialComponent";

	@Check(CheckType.EXPENSIVE)
	public void checkFeature(TestSuite feature) {
		// TODO validate that feature file name and feature name are the same.
		if (!Character.isUpperCase(feature.getName().charAt(0))) {
			warning("TestSuite name should start with a capital", SheepDogPackage.Literals.MODEL__NAME, INVALID_NAME);
		}
	}

	@Check(CheckType.NORMAL)
	public void checkScenario(TestStepContainer abstractScenario) {
		if (!Character.isUpperCase(abstractScenario.getName().charAt(0))) {
			warning("Scenario name should start with a capital", SheepDogPackage.Literals.TEST_STEP_CONTAINER__NAME,
					INVALID_NAME);
		}
	}

	@Check(CheckType.FAST)
	public void checkStepName(TestStep step) {
		try {
			if (step.getName() != null) {
				String problems = StepDefinitionHelper.validateError(new LanguageAccessImpl(step));
				if (!problems.isEmpty()) {
					error(problems, SheepDogPackage.Literals.TEST_STEP__NAME, INVALID_NAME);
				} else {
					problems = StepDefinitionHelper.validateWarning(new LanguageAccessImpl(step));
					if (!problems.isEmpty()) {
						warning(problems, SheepDogPackage.Literals.TEST_STEP__NAME, MISSING_STEP_DEF,
								getAlternateObjects(new LanguageAccessImpl(step)));
					}
				}
			}
		} catch (Exception e) {
			logError(e, step.getName());
		}
	}

	@Check(CheckType.FAST)
	public void checkStepTableName(Table stepTable) {
		// TODO Add table column row validation, each row should have the max number of
		// columns
		// TODO make tests for this
		if (stepTable.getRowList() != null) {
			if (stepTable.getRowList().size() > 0) {
				for (Cell header : stepTable.getRowList().get(0).getCellList()) {
					if (!Character.isUpperCase(header.getName().charAt(0))) {
						warning("Table header names should start with a capital: " + header.getName(),
								SheepDogPackage.Literals.TABLE__ROW_LIST, INVALID_HEADER, header.getName());
					}
				}
			}
		}
	}

	public String[] getAlternateObjects(LanguageAccessImpl la) throws Exception {
		Object[] alternateProposals = StepDefinitionHelper.getAlternateObjects(la);
		String[] alternates = new String[alternateProposals.length];
		for (int i = 0; i < alternates.length; i++) {
			alternates[i] = alternateProposals[i].toString();
		}
		return alternates;
	}

	private void logError(Exception e, String name) {
		// TODO inject the logger instead
		System.out.println("There was a problem listing directories for: " + name);
		StringWriter sw = new StringWriter();
		e.printStackTrace(new PrintWriter(sw));
		System.out.println(sw.toString());
	}
}
