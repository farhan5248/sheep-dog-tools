/*
 * generated by Xtext 2.39.0.M1
 */
grammar InternalSheepDog;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.farhan.dsl.sheepdog.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.farhan.dsl.sheepdog.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.farhan.dsl.sheepdog.services.SheepDogGrammarAccess;

}

@parser::members {

 	private SheepDogGrammarAccess grammarAccess;

    public InternalSheepDogParser(TokenStream input, SheepDogGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected SheepDogGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getModelAccess().getStepObjectParserRuleCall_0());
		}
		this_StepObject_0=ruleStepObject
		{
			$current = $this_StepObject_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getModelAccess().getTestSuiteParserRuleCall_1());
		}
		this_TestSuite_1=ruleTestSuite
		{
			$current = $this_TestSuite_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStepObject
entryRuleStepObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStepObjectRule()); }
	iv_ruleStepObject=ruleStepObject
	{ $current=$iv_ruleStepObject.current; }
	EOF;

// Rule StepObject
ruleStepObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='='
		{
			newLeafNode(otherlv_0, grammarAccess.getStepObjectAccess().getEqualsSignKeyword_0());
		}
		otherlv_1='Step-Object:'
		{
			newLeafNode(otherlv_1, grammarAccess.getStepObjectAccess().getStepObjectKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStepObjectAccess().getNameTitleParserRuleCall_2_0());
				}
				lv_name_2_0=ruleTitle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStepObjectRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.farhan.dsl.sheepdog.SheepDog.Title");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_EOL_3=RULE_EOL
		{
			newLeafNode(this_EOL_3, grammarAccess.getStepObjectAccess().getEOLTerminalRuleCall_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStepObjectAccess().getStatementListStatementParserRuleCall_4_0());
				}
				lv_statementList_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStepObjectRule());
					}
					add(
						$current,
						"statementList",
						lv_statementList_4_0,
						"org.farhan.dsl.sheepdog.SheepDog.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getStepObjectAccess().getStepDefinitionListStepDefinitionParserRuleCall_5_0());
				}
				lv_stepDefinitionList_5_0=ruleStepDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStepObjectRule());
					}
					add(
						$current,
						"stepDefinitionList",
						lv_stepDefinitionList_5_0,
						"org.farhan.dsl.sheepdog.SheepDog.StepDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleStepDefinition
entryRuleStepDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStepDefinitionRule()); }
	iv_ruleStepDefinition=ruleStepDefinition
	{ $current=$iv_ruleStepDefinition.current; }
	EOF;

// Rule StepDefinition
ruleStepDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='=='
		{
			newLeafNode(otherlv_0, grammarAccess.getStepDefinitionAccess().getEqualsSignEqualsSignKeyword_0());
		}
		otherlv_1='Step-Definition:'
		{
			newLeafNode(otherlv_1, grammarAccess.getStepDefinitionAccess().getStepDefinitionKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStepDefinitionAccess().getNameTitleParserRuleCall_2_0());
				}
				lv_name_2_0=ruleTitle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStepDefinitionRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.farhan.dsl.sheepdog.SheepDog.Title");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_EOL_3=RULE_EOL
		{
			newLeafNode(this_EOL_3, grammarAccess.getStepDefinitionAccess().getEOLTerminalRuleCall_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStepDefinitionAccess().getStatementListStatementParserRuleCall_4_0());
				}
				lv_statementList_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStepDefinitionRule());
					}
					add(
						$current,
						"statementList",
						lv_statementList_4_0,
						"org.farhan.dsl.sheepdog.SheepDog.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getStepDefinitionAccess().getStepParameterListStepParametersParserRuleCall_5_0());
				}
				lv_stepParameterList_5_0=ruleStepParameters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStepDefinitionRule());
					}
					add(
						$current,
						"stepParameterList",
						lv_stepParameterList_5_0,
						"org.farhan.dsl.sheepdog.SheepDog.StepParameters");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleStepParameters
entryRuleStepParameters returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStepParametersRule()); }
	iv_ruleStepParameters=ruleStepParameters
	{ $current=$iv_ruleStepParameters.current; }
	EOF;

// Rule StepParameters
ruleStepParameters returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='==='
		{
			newLeafNode(otherlv_0, grammarAccess.getStepParametersAccess().getEqualsSignEqualsSignEqualsSignKeyword_0());
		}
		otherlv_1='Step-Parameters:'
		{
			newLeafNode(otherlv_1, grammarAccess.getStepParametersAccess().getStepParametersKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStepParametersAccess().getNameTitleParserRuleCall_2_0());
				}
				lv_name_2_0=ruleTitle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStepParametersRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.farhan.dsl.sheepdog.SheepDog.Title");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_EOL_3=RULE_EOL
		{
			newLeafNode(this_EOL_3, grammarAccess.getStepParametersAccess().getEOLTerminalRuleCall_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStepParametersAccess().getStatementListStatementParserRuleCall_4_0());
				}
				lv_statementList_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStepParametersRule());
					}
					add(
						$current,
						"statementList",
						lv_statementList_4_0,
						"org.farhan.dsl.sheepdog.SheepDog.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getStepParametersAccess().getTableTableParserRuleCall_5_0());
				}
				lv_table_5_0=ruleTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStepParametersRule());
					}
					set(
						$current,
						"table",
						lv_table_5_0,
						"org.farhan.dsl.sheepdog.SheepDog.Table");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTestSuite
entryRuleTestSuite returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestSuiteRule()); }
	iv_ruleTestSuite=ruleTestSuite
	{ $current=$iv_ruleTestSuite.current; }
	EOF;

// Rule TestSuite
ruleTestSuite returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='='
		{
			newLeafNode(otherlv_0, grammarAccess.getTestSuiteAccess().getEqualsSignKeyword_0());
		}
		otherlv_1='Test-Suite:'
		{
			newLeafNode(otherlv_1, grammarAccess.getTestSuiteAccess().getTestSuiteKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestSuiteAccess().getNameTitleParserRuleCall_2_0());
				}
				lv_name_2_0=ruleTitle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestSuiteRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.farhan.dsl.sheepdog.SheepDog.Title");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_EOL_3=RULE_EOL
		{
			newLeafNode(this_EOL_3, grammarAccess.getTestSuiteAccess().getEOLTerminalRuleCall_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestSuiteAccess().getStatementListStatementParserRuleCall_4_0());
				}
				lv_statementList_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestSuiteRule());
					}
					add(
						$current,
						"statementList",
						lv_statementList_4_0,
						"org.farhan.dsl.sheepdog.SheepDog.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getTestSuiteAccess().getTestStepContainerListTestStepContainerParserRuleCall_5_0());
				}
				lv_testStepContainerList_5_0=ruleTestStepContainer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestSuiteRule());
					}
					add(
						$current,
						"testStepContainerList",
						lv_testStepContainerList_5_0,
						"org.farhan.dsl.sheepdog.SheepDog.TestStepContainer");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleTestStepContainer
entryRuleTestStepContainer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestStepContainerRule()); }
	iv_ruleTestStepContainer=ruleTestStepContainer
	{ $current=$iv_ruleTestStepContainer.current; }
	EOF;

// Rule TestStepContainer
ruleTestStepContainer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTestStepContainerAccess().getTestSetupParserRuleCall_0());
		}
		this_TestSetup_0=ruleTestSetup
		{
			$current = $this_TestSetup_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTestStepContainerAccess().getTestCaseParserRuleCall_1());
		}
		this_TestCase_1=ruleTestCase
		{
			$current = $this_TestCase_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTestSetup
entryRuleTestSetup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestSetupRule()); }
	iv_ruleTestSetup=ruleTestSetup
	{ $current=$iv_ruleTestSetup.current; }
	EOF;

// Rule TestSetup
ruleTestSetup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='=='
		{
			newLeafNode(otherlv_0, grammarAccess.getTestSetupAccess().getEqualsSignEqualsSignKeyword_0());
		}
		otherlv_1='Test-Setup:'
		{
			newLeafNode(otherlv_1, grammarAccess.getTestSetupAccess().getTestSetupKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestSetupAccess().getNameTitleParserRuleCall_2_0());
				}
				lv_name_2_0=ruleTitle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestSetupRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.farhan.dsl.sheepdog.SheepDog.Title");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_EOL_3=RULE_EOL
		{
			newLeafNode(this_EOL_3, grammarAccess.getTestSetupAccess().getEOLTerminalRuleCall_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestSetupAccess().getStatementListStatementParserRuleCall_4_0());
				}
				lv_statementList_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestSetupRule());
					}
					add(
						$current,
						"statementList",
						lv_statementList_4_0,
						"org.farhan.dsl.sheepdog.SheepDog.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getTestSetupAccess().getTestStepListTestStepParserRuleCall_5_0());
				}
				lv_testStepList_5_0=ruleTestStep
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestSetupRule());
					}
					add(
						$current,
						"testStepList",
						lv_testStepList_5_0,
						"org.farhan.dsl.sheepdog.SheepDog.TestStep");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleTestCase
entryRuleTestCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestCaseRule()); }
	iv_ruleTestCase=ruleTestCase
	{ $current=$iv_ruleTestCase.current; }
	EOF;

// Rule TestCase
ruleTestCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='=='
		{
			newLeafNode(otherlv_0, grammarAccess.getTestCaseAccess().getEqualsSignEqualsSignKeyword_0());
		}
		otherlv_1='Test-Case:'
		{
			newLeafNode(otherlv_1, grammarAccess.getTestCaseAccess().getTestCaseKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestCaseAccess().getNameTitleParserRuleCall_2_0());
				}
				lv_name_2_0=ruleTitle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestCaseRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.farhan.dsl.sheepdog.SheepDog.Title");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_EOL_3=RULE_EOL
		{
			newLeafNode(this_EOL_3, grammarAccess.getTestCaseAccess().getEOLTerminalRuleCall_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestCaseAccess().getStatementListStatementParserRuleCall_4_0());
				}
				lv_statementList_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestCaseRule());
					}
					add(
						$current,
						"statementList",
						lv_statementList_4_0,
						"org.farhan.dsl.sheepdog.SheepDog.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getTestCaseAccess().getTestStepListTestStepParserRuleCall_5_0());
				}
				lv_testStepList_5_0=ruleTestStep
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestCaseRule());
					}
					add(
						$current,
						"testStepList",
						lv_testStepList_5_0,
						"org.farhan.dsl.sheepdog.SheepDog.TestStep");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getTestCaseAccess().getTestDataListTestDataParserRuleCall_6_0());
				}
				lv_testDataList_6_0=ruleTestData
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestCaseRule());
					}
					add(
						$current,
						"testDataList",
						lv_testDataList_6_0,
						"org.farhan.dsl.sheepdog.SheepDog.TestData");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleTestData
entryRuleTestData returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestDataRule()); }
	iv_ruleTestData=ruleTestData
	{ $current=$iv_ruleTestData.current; }
	EOF;

// Rule TestData
ruleTestData returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='==='
		{
			newLeafNode(otherlv_0, grammarAccess.getTestDataAccess().getEqualsSignEqualsSignEqualsSignKeyword_0());
		}
		otherlv_1='Test-Data:'
		{
			newLeafNode(otherlv_1, grammarAccess.getTestDataAccess().getTestDataKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestDataAccess().getNameTitleParserRuleCall_2_0());
				}
				lv_name_2_0=ruleTitle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestDataRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.farhan.dsl.sheepdog.SheepDog.Title");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_EOL_3=RULE_EOL
		{
			newLeafNode(this_EOL_3, grammarAccess.getTestDataAccess().getEOLTerminalRuleCall_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestDataAccess().getStatementListStatementParserRuleCall_4_0());
				}
				lv_statementList_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestDataRule());
					}
					add(
						$current,
						"statementList",
						lv_statementList_4_0,
						"org.farhan.dsl.sheepdog.SheepDog.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getTestDataAccess().getTableTableParserRuleCall_5_0());
				}
				lv_table_5_0=ruleTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestDataRule());
					}
					set(
						$current,
						"table",
						lv_table_5_0,
						"org.farhan.dsl.sheepdog.SheepDog.Table");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTestStep
entryRuleTestStep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestStepRule()); }
	iv_ruleTestStep=ruleTestStep
	{ $current=$iv_ruleTestStep.current; }
	EOF;

// Rule TestStep
ruleTestStep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTestStepAccess().getGivenParserRuleCall_0());
		}
		this_Given_0=ruleGiven
		{
			$current = $this_Given_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTestStepAccess().getWhenParserRuleCall_1());
		}
		this_When_1=ruleWhen
		{
			$current = $this_When_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTestStepAccess().getThenParserRuleCall_2());
		}
		this_Then_2=ruleThen
		{
			$current = $this_Then_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTestStepAccess().getAndParserRuleCall_3());
		}
		this_And_3=ruleAnd
		{
			$current = $this_And_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleGiven
entryRuleGiven returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGivenRule()); }
	iv_ruleGiven=ruleGiven
	{ $current=$iv_ruleGiven.current; }
	EOF;

// Rule Given
ruleGiven returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='==='
		{
			newLeafNode(otherlv_0, grammarAccess.getGivenAccess().getEqualsSignEqualsSignEqualsSignKeyword_0());
		}
		otherlv_1='Given:'
		{
			newLeafNode(otherlv_1, grammarAccess.getGivenAccess().getGivenKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGivenAccess().getNameTitleParserRuleCall_2_0());
				}
				lv_name_2_0=ruleTitle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGivenRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.farhan.dsl.sheepdog.SheepDog.Title");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_EOL_3=RULE_EOL
		{
			newLeafNode(this_EOL_3, grammarAccess.getGivenAccess().getEOLTerminalRuleCall_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getGivenAccess().getTableTableParserRuleCall_4_0_0());
					}
					lv_table_4_0=ruleTable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGivenRule());
						}
						set(
							$current,
							"table",
							lv_table_4_0,
							"org.farhan.dsl.sheepdog.SheepDog.Table");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getGivenAccess().getTextTextParserRuleCall_4_1_0());
					}
					lv_text_5_0=ruleText
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGivenRule());
						}
						set(
							$current,
							"text",
							lv_text_5_0,
							"org.farhan.dsl.sheepdog.SheepDog.Text");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleWhen
entryRuleWhen returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhenRule()); }
	iv_ruleWhen=ruleWhen
	{ $current=$iv_ruleWhen.current; }
	EOF;

// Rule When
ruleWhen returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='==='
		{
			newLeafNode(otherlv_0, grammarAccess.getWhenAccess().getEqualsSignEqualsSignEqualsSignKeyword_0());
		}
		otherlv_1='When:'
		{
			newLeafNode(otherlv_1, grammarAccess.getWhenAccess().getWhenKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhenAccess().getNameTitleParserRuleCall_2_0());
				}
				lv_name_2_0=ruleTitle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhenRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.farhan.dsl.sheepdog.SheepDog.Title");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_EOL_3=RULE_EOL
		{
			newLeafNode(this_EOL_3, grammarAccess.getWhenAccess().getEOLTerminalRuleCall_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getWhenAccess().getTableTableParserRuleCall_4_0_0());
					}
					lv_table_4_0=ruleTable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWhenRule());
						}
						set(
							$current,
							"table",
							lv_table_4_0,
							"org.farhan.dsl.sheepdog.SheepDog.Table");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getWhenAccess().getTextTextParserRuleCall_4_1_0());
					}
					lv_text_5_0=ruleText
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWhenRule());
						}
						set(
							$current,
							"text",
							lv_text_5_0,
							"org.farhan.dsl.sheepdog.SheepDog.Text");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleThen
entryRuleThen returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getThenRule()); }
	iv_ruleThen=ruleThen
	{ $current=$iv_ruleThen.current; }
	EOF;

// Rule Then
ruleThen returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='==='
		{
			newLeafNode(otherlv_0, grammarAccess.getThenAccess().getEqualsSignEqualsSignEqualsSignKeyword_0());
		}
		otherlv_1='Then:'
		{
			newLeafNode(otherlv_1, grammarAccess.getThenAccess().getThenKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getThenAccess().getNameTitleParserRuleCall_2_0());
				}
				lv_name_2_0=ruleTitle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getThenRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.farhan.dsl.sheepdog.SheepDog.Title");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_EOL_3=RULE_EOL
		{
			newLeafNode(this_EOL_3, grammarAccess.getThenAccess().getEOLTerminalRuleCall_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getThenAccess().getTableTableParserRuleCall_4_0_0());
					}
					lv_table_4_0=ruleTable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getThenRule());
						}
						set(
							$current,
							"table",
							lv_table_4_0,
							"org.farhan.dsl.sheepdog.SheepDog.Table");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getThenAccess().getTextTextParserRuleCall_4_1_0());
					}
					lv_text_5_0=ruleText
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getThenRule());
						}
						set(
							$current,
							"text",
							lv_text_5_0,
							"org.farhan.dsl.sheepdog.SheepDog.Text");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='==='
		{
			newLeafNode(otherlv_0, grammarAccess.getAndAccess().getEqualsSignEqualsSignEqualsSignKeyword_0());
		}
		otherlv_1='And:'
		{
			newLeafNode(otherlv_1, grammarAccess.getAndAccess().getAndKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAndAccess().getNameTitleParserRuleCall_2_0());
				}
				lv_name_2_0=ruleTitle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAndRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.farhan.dsl.sheepdog.SheepDog.Title");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_EOL_3=RULE_EOL
		{
			newLeafNode(this_EOL_3, grammarAccess.getAndAccess().getEOLTerminalRuleCall_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getTableTableParserRuleCall_4_0_0());
					}
					lv_table_4_0=ruleTable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						set(
							$current,
							"table",
							lv_table_4_0,
							"org.farhan.dsl.sheepdog.SheepDog.Table");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getTextTextParserRuleCall_4_1_0());
					}
					lv_text_5_0=ruleText
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						set(
							$current,
							"text",
							lv_text_5_0,
							"org.farhan.dsl.sheepdog.SheepDog.Text");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleText
entryRuleText returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTextRule()); }
	iv_ruleText=ruleText
	{ $current=$iv_ruleText.current; }
	EOF;

// Rule Text
ruleText returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_RAWTEXT
				{
					newLeafNode(lv_name_0_0, grammarAccess.getTextAccess().getNameRAWTEXTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTextRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.farhan.dsl.sheepdog.SheepDog.RAWTEXT");
				}
			)
		)
		this_EOL_1=RULE_EOL
		{
			newLeafNode(this_EOL_1, grammarAccess.getTextAccess().getEOLTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleTable
entryRuleTable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableRule()); }
	iv_ruleTable=ruleTable
	{ $current=$iv_ruleTable.current; }
	EOF;

// Rule Table
ruleTable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='|==='
		{
			newLeafNode(otherlv_0, grammarAccess.getTableAccess().getVerticalLineEqualsSignEqualsSignEqualsSignKeyword_0());
		}
		this_EOL_1=RULE_EOL
		{
			newLeafNode(this_EOL_1, grammarAccess.getTableAccess().getEOLTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTableAccess().getRowListRowParserRuleCall_2_0());
				}
				lv_rowList_2_0=ruleRow
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableRule());
					}
					add(
						$current,
						"rowList",
						lv_rowList_2_0,
						"org.farhan.dsl.sheepdog.SheepDog.Row");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='|==='
		{
			newLeafNode(otherlv_3, grammarAccess.getTableAccess().getVerticalLineEqualsSignEqualsSignEqualsSignKeyword_3());
		}
		this_EOL_4=RULE_EOL
		{
			newLeafNode(this_EOL_4, grammarAccess.getTableAccess().getEOLTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleRow
entryRuleRow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRowRule()); }
	iv_ruleRow=ruleRow
	{ $current=$iv_ruleRow.current; }
	EOF;

// Rule Row
ruleRow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRowAccess().getCellListCellParserRuleCall_0_0());
				}
				lv_cellList_0_0=ruleCell
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRowRule());
					}
					add(
						$current,
						"cellList",
						lv_cellList_0_0,
						"org.farhan.dsl.sheepdog.SheepDog.Cell");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		this_EOL_1=RULE_EOL
		{
			newLeafNode(this_EOL_1, grammarAccess.getRowAccess().getEOLTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleCell
entryRuleCell returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCellRule()); }
	iv_ruleCell=ruleCell
	{ $current=$iv_ruleCell.current; }
	EOF;

// Rule Cell
ruleCell returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='|'
		{
			newLeafNode(otherlv_0, grammarAccess.getCellAccess().getVerticalLineKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCellAccess().getNameTitleParserRuleCall_1_0());
				}
				lv_name_1_0=ruleTitle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCellRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.farhan.dsl.sheepdog.SheepDog.Title");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getNameTitleParserRuleCall_0_0());
				}
				lv_name_0_0=ruleTitle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"org.farhan.dsl.sheepdog.SheepDog.Title");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_EOL_1=RULE_EOL
		{
			newLeafNode(this_EOL_1, grammarAccess.getStatementAccess().getEOLTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleTitle
entryRuleTitle returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTitleRule()); }
	iv_ruleTitle=ruleTitle
	{ $current=$iv_ruleTitle.current.getText(); }
	EOF;

// Rule Title
ruleTitle returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_WORD_0=RULE_WORD
		{
			$current.merge(this_WORD_0);
		}
		{
			newLeafNode(this_WORD_0, grammarAccess.getTitleAccess().getWORDTerminalRuleCall());
		}
	)+
;

RULE_WORD : ~((' '|'\t'|'\r'|'\n'|'['|']'|'|'|'#')) ~((' '|'\t'|'\r'|'\n'|'['|']'))*;

RULE_WS : (' '|'\t'|'\r')+;

RULE_SL_COMMENT : '#' ~('\n')* RULE_EOL;

RULE_EOL : '\n'+;

RULE_RAWTEXT : '----' '\n' .+ '\n' '----';
