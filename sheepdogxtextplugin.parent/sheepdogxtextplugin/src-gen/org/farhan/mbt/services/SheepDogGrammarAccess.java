/*
 * generated by Xtext 2.36.0
 */
package org.farhan.mbt.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SheepDogGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStepObjectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTestSuiteParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Model:
		//    StepObject | TestSuite;
		@Override public ParserRule getRule() { return rule; }
		
		//StepObject | TestSuite
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StepObject
		public RuleCall getStepObjectParserRuleCall_0() { return cStepObjectParserRuleCall_0; }
		
		//TestSuite
		public RuleCall getTestSuiteParserRuleCall_1() { return cTestSuiteParserRuleCall_1; }
	}
	public class StepObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.StepObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStepObjectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTitleParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cStatementListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementListStatementParserRuleCall_4_0 = (RuleCall)cStatementListAssignment_4.eContents().get(0);
		private final Assignment cStepDefinitionListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStepDefinitionListStepDefinitionParserRuleCall_5_0 = (RuleCall)cStepDefinitionListAssignment_5.eContents().get(0);
		
		//StepObject:
		//    '=' 'Step-Object:' name=Title EOL
		//    statementList+=Statement*
		//    stepDefinitionList+=StepDefinition*;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' 'Step-Object:' name=Title EOL
		//statementList+=Statement*
		//stepDefinitionList+=StepDefinition*
		public Group getGroup() { return cGroup; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//'Step-Object:'
		public Keyword getStepObjectKeyword_1() { return cStepObjectKeyword_1; }
		
		//name=Title
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_2_0() { return cNameTitleParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//statementList+=Statement*
		public Assignment getStatementListAssignment_4() { return cStatementListAssignment_4; }
		
		//Statement
		public RuleCall getStatementListStatementParserRuleCall_4_0() { return cStatementListStatementParserRuleCall_4_0; }
		
		//stepDefinitionList+=StepDefinition*
		public Assignment getStepDefinitionListAssignment_5() { return cStepDefinitionListAssignment_5; }
		
		//StepDefinition
		public RuleCall getStepDefinitionListStepDefinitionParserRuleCall_5_0() { return cStepDefinitionListStepDefinitionParserRuleCall_5_0; }
	}
	public class StepDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.StepDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStepDefinitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTitleParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cStatementListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementListStatementParserRuleCall_4_0 = (RuleCall)cStatementListAssignment_4.eContents().get(0);
		private final Assignment cStepParameterListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStepParameterListStepParametersParserRuleCall_5_0 = (RuleCall)cStepParameterListAssignment_5.eContents().get(0);
		
		//StepDefinition:
		//    '==' 'Step-Definition:' name=Title EOL
		//    statementList+=Statement*
		//    stepParameterList+=StepParameters*;
		@Override public ParserRule getRule() { return rule; }
		
		//'==' 'Step-Definition:' name=Title EOL
		//statementList+=Statement*
		//stepParameterList+=StepParameters*
		public Group getGroup() { return cGroup; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }
		
		//'Step-Definition:'
		public Keyword getStepDefinitionKeyword_1() { return cStepDefinitionKeyword_1; }
		
		//name=Title
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_2_0() { return cNameTitleParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//statementList+=Statement*
		public Assignment getStatementListAssignment_4() { return cStatementListAssignment_4; }
		
		//Statement
		public RuleCall getStatementListStatementParserRuleCall_4_0() { return cStatementListStatementParserRuleCall_4_0; }
		
		//stepParameterList+=StepParameters*
		public Assignment getStepParameterListAssignment_5() { return cStepParameterListAssignment_5; }
		
		//StepParameters
		public RuleCall getStepParameterListStepParametersParserRuleCall_5_0() { return cStepParameterListStepParametersParserRuleCall_5_0; }
	}
	public class StepParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.StepParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStepParametersKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTitleParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cStatementListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementListStatementParserRuleCall_4_0 = (RuleCall)cStatementListAssignment_4.eContents().get(0);
		private final Assignment cTableAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTableTableParserRuleCall_5_0 = (RuleCall)cTableAssignment_5.eContents().get(0);
		
		//StepParameters:
		//    '===' 'Step-Parameters:' name=Title EOL
		//    statementList+=Statement*
		//    table=Table;
		@Override public ParserRule getRule() { return rule; }
		
		//'===' 'Step-Parameters:' name=Title EOL
		//statementList+=Statement*
		//table=Table
		public Group getGroup() { return cGroup; }
		
		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignEqualsSignKeyword_0; }
		
		//'Step-Parameters:'
		public Keyword getStepParametersKeyword_1() { return cStepParametersKeyword_1; }
		
		//name=Title
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_2_0() { return cNameTitleParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//statementList+=Statement*
		public Assignment getStatementListAssignment_4() { return cStatementListAssignment_4; }
		
		//Statement
		public RuleCall getStatementListStatementParserRuleCall_4_0() { return cStatementListStatementParserRuleCall_4_0; }
		
		//table=Table
		public Assignment getTableAssignment_5() { return cTableAssignment_5; }
		
		//Table
		public RuleCall getTableTableParserRuleCall_5_0() { return cTableTableParserRuleCall_5_0; }
	}
	public class TestSuiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.TestSuite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTestSuiteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTitleParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cStatementListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementListStatementParserRuleCall_4_0 = (RuleCall)cStatementListAssignment_4.eContents().get(0);
		private final Assignment cTestStepContainerListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTestStepContainerListTestStepContainerParserRuleCall_5_0 = (RuleCall)cTestStepContainerListAssignment_5.eContents().get(0);
		
		//TestSuite:
		//    '=' 'Test-Suite:' name=Title EOL
		//    statementList+=Statement*
		//    testStepContainerList+=TestStepContainer*;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' 'Test-Suite:' name=Title EOL
		//statementList+=Statement*
		//testStepContainerList+=TestStepContainer*
		public Group getGroup() { return cGroup; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//'Test-Suite:'
		public Keyword getTestSuiteKeyword_1() { return cTestSuiteKeyword_1; }
		
		//name=Title
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_2_0() { return cNameTitleParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//statementList+=Statement*
		public Assignment getStatementListAssignment_4() { return cStatementListAssignment_4; }
		
		//Statement
		public RuleCall getStatementListStatementParserRuleCall_4_0() { return cStatementListStatementParserRuleCall_4_0; }
		
		//testStepContainerList+=TestStepContainer*
		public Assignment getTestStepContainerListAssignment_5() { return cTestStepContainerListAssignment_5; }
		
		//TestStepContainer
		public RuleCall getTestStepContainerListTestStepContainerParserRuleCall_5_0() { return cTestStepContainerListTestStepContainerParserRuleCall_5_0; }
	}
	public class TestStepContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.TestStepContainer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTestSetupParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTestCaseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TestStepContainer:
		//    TestSetup | TestCase;
		@Override public ParserRule getRule() { return rule; }
		
		//TestSetup | TestCase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TestSetup
		public RuleCall getTestSetupParserRuleCall_0() { return cTestSetupParserRuleCall_0; }
		
		//TestCase
		public RuleCall getTestCaseParserRuleCall_1() { return cTestCaseParserRuleCall_1; }
	}
	public class TestSetupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.TestSetup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagListTagsParserRuleCall_0_0 = (RuleCall)cTagListAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTestSetupKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameTitleParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cStatementListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementListStatementParserRuleCall_5_0 = (RuleCall)cStatementListAssignment_5.eContents().get(0);
		private final Assignment cTestStepListAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTestStepListTestStepParserRuleCall_6_0 = (RuleCall)cTestStepListAssignment_6.eContents().get(0);
		
		//TestSetup:
		//    (tagList=Tags)?
		//    '==' 'Test-Setup:' name=Title EOL
		//    statementList+=Statement*
		//    testStepList+=TestStep*;
		@Override public ParserRule getRule() { return rule; }
		
		//(tagList=Tags)?
		//'==' 'Test-Setup:' name=Title EOL
		//statementList+=Statement*
		//testStepList+=TestStep*
		public Group getGroup() { return cGroup; }
		
		//(tagList=Tags)?
		public Assignment getTagListAssignment_0() { return cTagListAssignment_0; }
		
		//Tags
		public RuleCall getTagListTagsParserRuleCall_0_0() { return cTagListTagsParserRuleCall_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1() { return cEqualsSignEqualsSignKeyword_1; }
		
		//'Test-Setup:'
		public Keyword getTestSetupKeyword_2() { return cTestSetupKeyword_2; }
		
		//name=Title
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_3_0() { return cNameTitleParserRuleCall_3_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_4() { return cEOLTerminalRuleCall_4; }
		
		//statementList+=Statement*
		public Assignment getStatementListAssignment_5() { return cStatementListAssignment_5; }
		
		//Statement
		public RuleCall getStatementListStatementParserRuleCall_5_0() { return cStatementListStatementParserRuleCall_5_0; }
		
		//testStepList+=TestStep*
		public Assignment getTestStepListAssignment_6() { return cTestStepListAssignment_6; }
		
		//TestStep
		public RuleCall getTestStepListTestStepParserRuleCall_6_0() { return cTestStepListTestStepParserRuleCall_6_0; }
	}
	public class TestCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.TestCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagListTagsParserRuleCall_0_0 = (RuleCall)cTagListAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTestCaseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameTitleParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cStatementListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementListStatementParserRuleCall_5_0 = (RuleCall)cStatementListAssignment_5.eContents().get(0);
		private final Assignment cTestStepListAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTestStepListTestStepParserRuleCall_6_0 = (RuleCall)cTestStepListAssignment_6.eContents().get(0);
		private final Assignment cTestDataListAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTestDataListTestDataParserRuleCall_7_0 = (RuleCall)cTestDataListAssignment_7.eContents().get(0);
		
		//TestCase:
		//    (tagList=Tags)?
		//    '==' 'Test-Case:' name=Title EOL
		//    statementList+=Statement*
		//    testStepList+=TestStep*
		//    testDataList+=TestData*;
		@Override public ParserRule getRule() { return rule; }
		
		//(tagList=Tags)?
		//'==' 'Test-Case:' name=Title EOL
		//statementList+=Statement*
		//testStepList+=TestStep*
		//testDataList+=TestData*
		public Group getGroup() { return cGroup; }
		
		//(tagList=Tags)?
		public Assignment getTagListAssignment_0() { return cTagListAssignment_0; }
		
		//Tags
		public RuleCall getTagListTagsParserRuleCall_0_0() { return cTagListTagsParserRuleCall_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1() { return cEqualsSignEqualsSignKeyword_1; }
		
		//'Test-Case:'
		public Keyword getTestCaseKeyword_2() { return cTestCaseKeyword_2; }
		
		//name=Title
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_3_0() { return cNameTitleParserRuleCall_3_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_4() { return cEOLTerminalRuleCall_4; }
		
		//statementList+=Statement*
		public Assignment getStatementListAssignment_5() { return cStatementListAssignment_5; }
		
		//Statement
		public RuleCall getStatementListStatementParserRuleCall_5_0() { return cStatementListStatementParserRuleCall_5_0; }
		
		//testStepList+=TestStep*
		public Assignment getTestStepListAssignment_6() { return cTestStepListAssignment_6; }
		
		//TestStep
		public RuleCall getTestStepListTestStepParserRuleCall_6_0() { return cTestStepListTestStepParserRuleCall_6_0; }
		
		//testDataList+=TestData*
		public Assignment getTestDataListAssignment_7() { return cTestDataListAssignment_7; }
		
		//TestData
		public RuleCall getTestDataListTestDataParserRuleCall_7_0() { return cTestDataListTestDataParserRuleCall_7_0; }
	}
	public class TestDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.TestData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagListTagsParserRuleCall_0_0 = (RuleCall)cTagListAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTestDataKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameTitleParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cStatementListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementListStatementParserRuleCall_5_0 = (RuleCall)cStatementListAssignment_5.eContents().get(0);
		private final Assignment cTableAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTableTableParserRuleCall_6_0 = (RuleCall)cTableAssignment_6.eContents().get(0);
		
		//// TODO this is confusing, examples has scenario tags? rename it
		//TestData:
		//    (tagList=Tags)?
		//    '===' 'Test-Data:' name=Title EOL
		//    statementList+=Statement*
		//    table=Table;
		@Override public ParserRule getRule() { return rule; }
		
		//(tagList=Tags)?
		//'===' 'Test-Data:' name=Title EOL
		//statementList+=Statement*
		//table=Table
		public Group getGroup() { return cGroup; }
		
		//(tagList=Tags)?
		public Assignment getTagListAssignment_0() { return cTagListAssignment_0; }
		
		//Tags
		public RuleCall getTagListTagsParserRuleCall_0_0() { return cTagListTagsParserRuleCall_0_0; }
		
		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_1() { return cEqualsSignEqualsSignEqualsSignKeyword_1; }
		
		//'Test-Data:'
		public Keyword getTestDataKeyword_2() { return cTestDataKeyword_2; }
		
		//name=Title
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_3_0() { return cNameTitleParserRuleCall_3_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_4() { return cEOLTerminalRuleCall_4; }
		
		//statementList+=Statement*
		public Assignment getStatementListAssignment_5() { return cStatementListAssignment_5; }
		
		//Statement
		public RuleCall getStatementListStatementParserRuleCall_5_0() { return cStatementListStatementParserRuleCall_5_0; }
		
		//table=Table
		public Assignment getTableAssignment_6() { return cTableAssignment_6; }
		
		//Table
		public RuleCall getTableTableParserRuleCall_6_0() { return cTableTableParserRuleCall_6_0; }
	}
	public class TestStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.TestStep");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGivenParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWhenParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cThenParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAndParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TestStep:
		//    Given | When | Then | And;
		@Override public ParserRule getRule() { return rule; }
		
		//Given | When | Then | And
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Given
		public RuleCall getGivenParserRuleCall_0() { return cGivenParserRuleCall_0; }
		
		//When
		public RuleCall getWhenParserRuleCall_1() { return cWhenParserRuleCall_1; }
		
		//Then
		public RuleCall getThenParserRuleCall_2() { return cThenParserRuleCall_2; }
		
		//And
		public RuleCall getAndParserRuleCall_3() { return cAndParserRuleCall_3; }
	}
	public class GivenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Given");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cGivenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTitleParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTableAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTableTableParserRuleCall_4_0_0 = (RuleCall)cTableAssignment_4_0.eContents().get(0);
		private final Assignment cTextAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cTextTextParserRuleCall_4_1_0 = (RuleCall)cTextAssignment_4_1.eContents().get(0);
		
		//Given:
		//    '===' 'Given:' name=Title EOL
		//    (table=Table | text=Text)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'===' 'Given:' name=Title EOL
		//(table=Table | text=Text)?
		public Group getGroup() { return cGroup; }
		
		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignEqualsSignKeyword_0; }
		
		//'Given:'
		public Keyword getGivenKeyword_1() { return cGivenKeyword_1; }
		
		//name=Title
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_2_0() { return cNameTitleParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//(table=Table | text=Text)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//table=Table
		public Assignment getTableAssignment_4_0() { return cTableAssignment_4_0; }
		
		//Table
		public RuleCall getTableTableParserRuleCall_4_0_0() { return cTableTableParserRuleCall_4_0_0; }
		
		//text=Text
		public Assignment getTextAssignment_4_1() { return cTextAssignment_4_1; }
		
		//Text
		public RuleCall getTextTextParserRuleCall_4_1_0() { return cTextTextParserRuleCall_4_1_0; }
	}
	public class WhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.When");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTitleParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTableAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTableTableParserRuleCall_4_0_0 = (RuleCall)cTableAssignment_4_0.eContents().get(0);
		private final Assignment cTextAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cTextTextParserRuleCall_4_1_0 = (RuleCall)cTextAssignment_4_1.eContents().get(0);
		
		//When:
		//    '===' 'When:' name=Title EOL
		//    (table=Table | text=Text)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'===' 'When:' name=Title EOL
		//(table=Table | text=Text)?
		public Group getGroup() { return cGroup; }
		
		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignEqualsSignKeyword_0; }
		
		//'When:'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
		
		//name=Title
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_2_0() { return cNameTitleParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//(table=Table | text=Text)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//table=Table
		public Assignment getTableAssignment_4_0() { return cTableAssignment_4_0; }
		
		//Table
		public RuleCall getTableTableParserRuleCall_4_0_0() { return cTableTableParserRuleCall_4_0_0; }
		
		//text=Text
		public Assignment getTextAssignment_4_1() { return cTextAssignment_4_1; }
		
		//Text
		public RuleCall getTextTextParserRuleCall_4_1_0() { return cTextTextParserRuleCall_4_1_0; }
	}
	public class ThenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Then");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cThenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTitleParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTableAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTableTableParserRuleCall_4_0_0 = (RuleCall)cTableAssignment_4_0.eContents().get(0);
		private final Assignment cTextAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cTextTextParserRuleCall_4_1_0 = (RuleCall)cTextAssignment_4_1.eContents().get(0);
		
		//Then:
		//    '===' 'Then:' name=Title EOL
		//    (table=Table | text=Text)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'===' 'Then:' name=Title EOL
		//(table=Table | text=Text)?
		public Group getGroup() { return cGroup; }
		
		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignEqualsSignKeyword_0; }
		
		//'Then:'
		public Keyword getThenKeyword_1() { return cThenKeyword_1; }
		
		//name=Title
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_2_0() { return cNameTitleParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//(table=Table | text=Text)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//table=Table
		public Assignment getTableAssignment_4_0() { return cTableAssignment_4_0; }
		
		//Table
		public RuleCall getTableTableParserRuleCall_4_0_0() { return cTableTableParserRuleCall_4_0_0; }
		
		//text=Text
		public Assignment getTextAssignment_4_1() { return cTextAssignment_4_1; }
		
		//Text
		public RuleCall getTextTextParserRuleCall_4_1_0() { return cTextTextParserRuleCall_4_1_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTitleParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTableAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTableTableParserRuleCall_4_0_0 = (RuleCall)cTableAssignment_4_0.eContents().get(0);
		private final Assignment cTextAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cTextTextParserRuleCall_4_1_0 = (RuleCall)cTextAssignment_4_1.eContents().get(0);
		
		//And:
		//    '===' 'And:' name=Title EOL
		//    (table=Table | text=Text)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'===' 'And:' name=Title EOL
		//(table=Table | text=Text)?
		public Group getGroup() { return cGroup; }
		
		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignEqualsSignKeyword_0; }
		
		//'And:'
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//name=Title
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_2_0() { return cNameTitleParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//(table=Table | text=Text)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//table=Table
		public Assignment getTableAssignment_4_0() { return cTableAssignment_4_0; }
		
		//Table
		public RuleCall getTableTableParserRuleCall_4_0_0() { return cTableTableParserRuleCall_4_0_0; }
		
		//text=Text
		public Assignment getTextAssignment_4_1() { return cTextAssignment_4_1; }
		
		//Text
		public RuleCall getTextTextParserRuleCall_4_1_0() { return cTextTextParserRuleCall_4_1_0; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Text");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameRAWTEXTTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Text:
		//    name=RAWTEXT EOL;
		@Override public ParserRule getRule() { return rule; }
		
		//name=RAWTEXT EOL
		public Group getGroup() { return cGroup; }
		
		//name=RAWTEXT
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//RAWTEXT
		public RuleCall getNameRAWTEXTTerminalRuleCall_0_0() { return cNameRAWTEXTTerminalRuleCall_0_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cRowListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRowListRowParserRuleCall_2_0 = (RuleCall)cRowListAssignment_2.eContents().get(0);
		private final Keyword cVerticalLineEqualsSignEqualsSignEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cEOLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Table:
		//    '|===' EOL
		//    rowList+=Row+
		//    '|===' EOL;
		@Override public ParserRule getRule() { return rule; }
		
		//'|===' EOL
		//rowList+=Row+
		//'|===' EOL
		public Group getGroup() { return cGroup; }
		
		//'|==='
		public Keyword getVerticalLineEqualsSignEqualsSignEqualsSignKeyword_0() { return cVerticalLineEqualsSignEqualsSignEqualsSignKeyword_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }
		
		//rowList+=Row+
		public Assignment getRowListAssignment_2() { return cRowListAssignment_2; }
		
		//Row
		public RuleCall getRowListRowParserRuleCall_2_0() { return cRowListRowParserRuleCall_2_0; }
		
		//'|==='
		public Keyword getVerticalLineEqualsSignEqualsSignEqualsSignKeyword_3() { return cVerticalLineEqualsSignEqualsSignEqualsSignKeyword_3; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_4() { return cEOLTerminalRuleCall_4; }
	}
	public class RowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Row");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCellListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCellListCellParserRuleCall_0_0 = (RuleCall)cCellListAssignment_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Row:
		//    cellList+=Cell+ EOL;
		@Override public ParserRule getRule() { return rule; }
		
		//cellList+=Cell+ EOL
		public Group getGroup() { return cGroup; }
		
		//cellList+=Cell+
		public Assignment getCellListAssignment_0() { return cCellListAssignment_0; }
		
		//Cell
		public RuleCall getCellListCellParserRuleCall_0_0() { return cCellListCellParserRuleCall_0_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }
	}
	public class TagsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Tags");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTagsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameWORDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Tags:
		//    '[tags=' name=WORD ']' EOL;
		@Override public ParserRule getRule() { return rule; }
		
		//'[tags=' name=WORD ']' EOL
		public Group getGroup() { return cGroup; }
		
		//'[tags='
		public Keyword getTagsKeyword_0() { return cTagsKeyword_0; }
		
		//name=WORD
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//WORD
		public RuleCall getNameWORDTerminalRuleCall_1_0() { return cNameWORDTerminalRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
	}
	public class CellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Cell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTitleParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Cell:
		//    '|' name=Title;
		@Override public ParserRule getRule() { return rule; }
		
		//'|' name=Title
		public Group getGroup() { return cGroup; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }
		
		//name=Title
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_1_0() { return cNameTitleParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameTitleParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Statement:
		//    name=Title EOL;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Title EOL
		public Group getGroup() { return cGroup; }
		
		//name=Title
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_0_0() { return cNameTitleParserRuleCall_0_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }
	}
	public class TitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Title");
		private final RuleCall cWORDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// TODO maybe I don't need Title and can ignore the warnings about it being used in a loop
		//Title:
		//    WORD+;
		@Override public ParserRule getRule() { return rule; }
		
		//WORD+
		public RuleCall getWORDTerminalRuleCall() { return cWORDTerminalRuleCall; }
	}
	
	
	private final ModelElements pModel;
	private final StepObjectElements pStepObject;
	private final StepDefinitionElements pStepDefinition;
	private final StepParametersElements pStepParameters;
	private final TestSuiteElements pTestSuite;
	private final TestStepContainerElements pTestStepContainer;
	private final TestSetupElements pTestSetup;
	private final TestCaseElements pTestCase;
	private final TestDataElements pTestData;
	private final TestStepElements pTestStep;
	private final GivenElements pGiven;
	private final WhenElements pWhen;
	private final ThenElements pThen;
	private final AndElements pAnd;
	private final TextElements pText;
	private final TableElements pTable;
	private final RowElements pRow;
	private final TagsElements pTags;
	private final CellElements pCell;
	private final StatementElements pStatement;
	private final TitleElements pTitle;
	private final TerminalRule tWORD;
	private final TerminalRule tWS;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tEOL;
	private final TerminalRule tRAWTEXT;
	
	private final Grammar grammar;

	@Inject
	public SheepDogGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pStepObject = new StepObjectElements();
		this.pStepDefinition = new StepDefinitionElements();
		this.pStepParameters = new StepParametersElements();
		this.pTestSuite = new TestSuiteElements();
		this.pTestStepContainer = new TestStepContainerElements();
		this.pTestSetup = new TestSetupElements();
		this.pTestCase = new TestCaseElements();
		this.pTestData = new TestDataElements();
		this.pTestStep = new TestStepElements();
		this.pGiven = new GivenElements();
		this.pWhen = new WhenElements();
		this.pThen = new ThenElements();
		this.pAnd = new AndElements();
		this.pText = new TextElements();
		this.pTable = new TableElements();
		this.pRow = new RowElements();
		this.pTags = new TagsElements();
		this.pCell = new CellElements();
		this.pStatement = new StatementElements();
		this.pTitle = new TitleElements();
		this.tWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.WORD");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.WS");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.SL_COMMENT");
		this.tEOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.EOL");
		this.tRAWTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.RAWTEXT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.farhan.mbt.SheepDog".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//    StepObject | TestSuite;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//StepObject:
	//    '=' 'Step-Object:' name=Title EOL
	//    statementList+=Statement*
	//    stepDefinitionList+=StepDefinition*;
	public StepObjectElements getStepObjectAccess() {
		return pStepObject;
	}
	
	public ParserRule getStepObjectRule() {
		return getStepObjectAccess().getRule();
	}
	
	//StepDefinition:
	//    '==' 'Step-Definition:' name=Title EOL
	//    statementList+=Statement*
	//    stepParameterList+=StepParameters*;
	public StepDefinitionElements getStepDefinitionAccess() {
		return pStepDefinition;
	}
	
	public ParserRule getStepDefinitionRule() {
		return getStepDefinitionAccess().getRule();
	}
	
	//StepParameters:
	//    '===' 'Step-Parameters:' name=Title EOL
	//    statementList+=Statement*
	//    table=Table;
	public StepParametersElements getStepParametersAccess() {
		return pStepParameters;
	}
	
	public ParserRule getStepParametersRule() {
		return getStepParametersAccess().getRule();
	}
	
	//TestSuite:
	//    '=' 'Test-Suite:' name=Title EOL
	//    statementList+=Statement*
	//    testStepContainerList+=TestStepContainer*;
	public TestSuiteElements getTestSuiteAccess() {
		return pTestSuite;
	}
	
	public ParserRule getTestSuiteRule() {
		return getTestSuiteAccess().getRule();
	}
	
	//TestStepContainer:
	//    TestSetup | TestCase;
	public TestStepContainerElements getTestStepContainerAccess() {
		return pTestStepContainer;
	}
	
	public ParserRule getTestStepContainerRule() {
		return getTestStepContainerAccess().getRule();
	}
	
	//TestSetup:
	//    (tagList=Tags)?
	//    '==' 'Test-Setup:' name=Title EOL
	//    statementList+=Statement*
	//    testStepList+=TestStep*;
	public TestSetupElements getTestSetupAccess() {
		return pTestSetup;
	}
	
	public ParserRule getTestSetupRule() {
		return getTestSetupAccess().getRule();
	}
	
	//TestCase:
	//    (tagList=Tags)?
	//    '==' 'Test-Case:' name=Title EOL
	//    statementList+=Statement*
	//    testStepList+=TestStep*
	//    testDataList+=TestData*;
	public TestCaseElements getTestCaseAccess() {
		return pTestCase;
	}
	
	public ParserRule getTestCaseRule() {
		return getTestCaseAccess().getRule();
	}
	
	//// TODO this is confusing, examples has scenario tags? rename it
	//TestData:
	//    (tagList=Tags)?
	//    '===' 'Test-Data:' name=Title EOL
	//    statementList+=Statement*
	//    table=Table;
	public TestDataElements getTestDataAccess() {
		return pTestData;
	}
	
	public ParserRule getTestDataRule() {
		return getTestDataAccess().getRule();
	}
	
	//TestStep:
	//    Given | When | Then | And;
	public TestStepElements getTestStepAccess() {
		return pTestStep;
	}
	
	public ParserRule getTestStepRule() {
		return getTestStepAccess().getRule();
	}
	
	//Given:
	//    '===' 'Given:' name=Title EOL
	//    (table=Table | text=Text)?;
	public GivenElements getGivenAccess() {
		return pGiven;
	}
	
	public ParserRule getGivenRule() {
		return getGivenAccess().getRule();
	}
	
	//When:
	//    '===' 'When:' name=Title EOL
	//    (table=Table | text=Text)?;
	public WhenElements getWhenAccess() {
		return pWhen;
	}
	
	public ParserRule getWhenRule() {
		return getWhenAccess().getRule();
	}
	
	//Then:
	//    '===' 'Then:' name=Title EOL
	//    (table=Table | text=Text)?;
	public ThenElements getThenAccess() {
		return pThen;
	}
	
	public ParserRule getThenRule() {
		return getThenAccess().getRule();
	}
	
	//And:
	//    '===' 'And:' name=Title EOL
	//    (table=Table | text=Text)?;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Text:
	//    name=RAWTEXT EOL;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//Table:
	//    '|===' EOL
	//    rowList+=Row+
	//    '|===' EOL;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//Row:
	//    cellList+=Cell+ EOL;
	public RowElements getRowAccess() {
		return pRow;
	}
	
	public ParserRule getRowRule() {
		return getRowAccess().getRule();
	}
	
	//Tags:
	//    '[tags=' name=WORD ']' EOL;
	public TagsElements getTagsAccess() {
		return pTags;
	}
	
	public ParserRule getTagsRule() {
		return getTagsAccess().getRule();
	}
	
	//Cell:
	//    '|' name=Title;
	public CellElements getCellAccess() {
		return pCell;
	}
	
	public ParserRule getCellRule() {
		return getCellAccess().getRule();
	}
	
	//Statement:
	//    name=Title EOL;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//// TODO maybe I don't need Title and can ignore the warnings about it being used in a loop
	//Title:
	//    WORD+;
	public TitleElements getTitleAccess() {
		return pTitle;
	}
	
	public ParserRule getTitleRule() {
		return getTitleAccess().getRule();
	}
	
	//// TODO look at fragments to handle escape characters etc instead of this and to handle re-using ' ' | '\t' | '\r' | '\n'
	//terminal WORD:
	//    !(' ' | '\t' | '\r' | '\n' | '[' | ']' | '|' | '#')
	//    !(' ' | '\t' | '\r' | '\n' | '[' | ']')*;
	public TerminalRule getWORDRule() {
		return tWORD;
	}
	
	//terminal WS:
	//    (' ' | '\t' | '\r')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal SL_COMMENT:
	//    '#' !('\n')* EOL;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal EOL:
	//    ('\n')+;
	public TerminalRule getEOLRule() {
		return tEOL;
	}
	
	//terminal RAWTEXT:
	//    '----' '\n' (.)+ '\n' '----';
	public TerminalRule getRAWTEXTRule() {
		return tRAWTEXT;
	}
}
