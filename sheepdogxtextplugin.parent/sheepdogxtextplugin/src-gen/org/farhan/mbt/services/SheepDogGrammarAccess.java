/*
 * generated by Xtext 2.36.0
 */
package org.farhan.mbt.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SheepDogGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStepObjectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Model:
		//    StepObject | Feature;
		@Override public ParserRule getRule() { return rule; }
		
		//StepObject | Feature
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StepObject
		public RuleCall getStepObjectParserRuleCall_0() { return cStepObjectParserRuleCall_0; }
		
		//Feature
		public RuleCall getFeatureParserRuleCall_1() { return cFeatureParserRuleCall_1; }
	}
	public class StepObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.StepObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cObjectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTitleParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Assignment cStepDefinitionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStepDefinitionsStepDefinitionParserRuleCall_5_0 = (RuleCall)cStepDefinitionsAssignment_5.eContents().get(0);
		
		//StepObject:
		//    '=' 'Object:' name=Title EOL
		//    statements+=Statement*
		//    stepDefinitions+=StepDefinition*;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' 'Object:' name=Title EOL
		//statements+=Statement*
		//stepDefinitions+=StepDefinition*
		public Group getGroup() { return cGroup; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//'Object:'
		public Keyword getObjectKeyword_1() { return cObjectKeyword_1; }
		
		//name=Title
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_2_0() { return cNameTitleParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
		
		//stepDefinitions+=StepDefinition*
		public Assignment getStepDefinitionsAssignment_5() { return cStepDefinitionsAssignment_5; }
		
		//StepDefinition
		public RuleCall getStepDefinitionsStepDefinitionParserRuleCall_5_0() { return cStepDefinitionsStepDefinitionParserRuleCall_5_0; }
	}
	public class StepDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.StepDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDefinitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTitleParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Assignment cStepParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStepParametersStepParametersParserRuleCall_5_0 = (RuleCall)cStepParametersAssignment_5.eContents().get(0);
		
		//StepDefinition:
		//    '==' 'Definition:' name=Title EOL
		//    statements+=Statement*
		//    stepParameters+=StepParameters*;
		@Override public ParserRule getRule() { return rule; }
		
		//'==' 'Definition:' name=Title EOL
		//statements+=Statement*
		//stepParameters+=StepParameters*
		public Group getGroup() { return cGroup; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }
		
		//'Definition:'
		public Keyword getDefinitionKeyword_1() { return cDefinitionKeyword_1; }
		
		//name=Title
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_2_0() { return cNameTitleParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
		
		//stepParameters+=StepParameters*
		public Assignment getStepParametersAssignment_5() { return cStepParametersAssignment_5; }
		
		//StepParameters
		public RuleCall getStepParametersStepParametersParserRuleCall_5_0() { return cStepParametersStepParametersParserRuleCall_5_0; }
	}
	public class StepParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.StepParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cParametersKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTitleParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Assignment cParametersTableAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametersTableTableParserRuleCall_5_0 = (RuleCall)cParametersTableAssignment_5.eContents().get(0);
		
		//StepParameters:
		//    '===' 'Parameters:' name=Title EOL
		//    statements+=Statement*
		//    parametersTable=Table;
		@Override public ParserRule getRule() { return rule; }
		
		//'===' 'Parameters:' name=Title EOL
		//statements+=Statement*
		//parametersTable=Table
		public Group getGroup() { return cGroup; }
		
		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignEqualsSignKeyword_0; }
		
		//'Parameters:'
		public Keyword getParametersKeyword_1() { return cParametersKeyword_1; }
		
		//name=Title
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_2_0() { return cNameTitleParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
		
		//parametersTable=Table
		public Assignment getParametersTableAssignment_5() { return cParametersTableAssignment_5; }
		
		//Table
		public RuleCall getParametersTableTableParserRuleCall_5_0() { return cParametersTableTableParserRuleCall_5_0; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFeatureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTitleParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Assignment cAbstractScenariosAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAbstractScenariosAbstractScenarioParserRuleCall_5_0 = (RuleCall)cAbstractScenariosAssignment_5.eContents().get(0);
		
		//Feature:
		//    '=' 'Feature:' name=Title EOL
		//    statements+=Statement*
		//    abstractScenarios+=AbstractScenario*;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' 'Feature:' name=Title EOL
		//statements+=Statement*
		//abstractScenarios+=AbstractScenario*
		public Group getGroup() { return cGroup; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//'Feature:'
		public Keyword getFeatureKeyword_1() { return cFeatureKeyword_1; }
		
		//name=Title
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_2_0() { return cNameTitleParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
		
		//abstractScenarios+=AbstractScenario*
		public Assignment getAbstractScenariosAssignment_5() { return cAbstractScenariosAssignment_5; }
		
		//AbstractScenario
		public RuleCall getAbstractScenariosAbstractScenarioParserRuleCall_5_0() { return cAbstractScenariosAbstractScenarioParserRuleCall_5_0; }
	}
	public class AbstractScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.AbstractScenario");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBackgroundParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScenarioParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractScenario:
		//    Background | Scenario;
		@Override public ParserRule getRule() { return rule; }
		
		//Background | Scenario
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Background
		public RuleCall getBackgroundParserRuleCall_0() { return cBackgroundParserRuleCall_0; }
		
		//Scenario
		public RuleCall getScenarioParserRuleCall_1() { return cScenarioParserRuleCall_1; }
	}
	public class BackgroundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Background");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsAbstractScenarioTagsParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBackgroundKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameTitleParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Assignment cStepsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStepsStepParserRuleCall_6_0 = (RuleCall)cStepsAssignment_6.eContents().get(0);
		
		//Background:
		//    (tags=AbstractScenarioTags)?
		//    '==' 'Background:' name=Title EOL
		//    statements+=Statement*
		//    steps+=Step*;
		@Override public ParserRule getRule() { return rule; }
		
		//(tags=AbstractScenarioTags)?
		//'==' 'Background:' name=Title EOL
		//statements+=Statement*
		//steps+=Step*
		public Group getGroup() { return cGroup; }
		
		//(tags=AbstractScenarioTags)?
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }
		
		//AbstractScenarioTags
		public RuleCall getTagsAbstractScenarioTagsParserRuleCall_0_0() { return cTagsAbstractScenarioTagsParserRuleCall_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1() { return cEqualsSignEqualsSignKeyword_1; }
		
		//'Background:'
		public Keyword getBackgroundKeyword_2() { return cBackgroundKeyword_2; }
		
		//name=Title
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_3_0() { return cNameTitleParserRuleCall_3_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_4() { return cEOLTerminalRuleCall_4; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_0() { return cStatementsStatementParserRuleCall_5_0; }
		
		//steps+=Step*
		public Assignment getStepsAssignment_6() { return cStepsAssignment_6; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_6_0() { return cStepsStepParserRuleCall_6_0; }
	}
	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsAbstractScenarioTagsParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cScenarioKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameTitleParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Assignment cStepsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStepsStepParserRuleCall_6_0 = (RuleCall)cStepsAssignment_6.eContents().get(0);
		private final Assignment cExamplesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExamplesExamplesParserRuleCall_7_0 = (RuleCall)cExamplesAssignment_7.eContents().get(0);
		
		//Scenario:
		//    (tags=AbstractScenarioTags)?
		//    '==' 'Scenario:' name=Title EOL
		//    statements+=Statement*
		//    steps+=Step*
		//    examples+=Examples*;
		@Override public ParserRule getRule() { return rule; }
		
		//(tags=AbstractScenarioTags)?
		//'==' 'Scenario:' name=Title EOL
		//statements+=Statement*
		//steps+=Step*
		//examples+=Examples*
		public Group getGroup() { return cGroup; }
		
		//(tags=AbstractScenarioTags)?
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }
		
		//AbstractScenarioTags
		public RuleCall getTagsAbstractScenarioTagsParserRuleCall_0_0() { return cTagsAbstractScenarioTagsParserRuleCall_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1() { return cEqualsSignEqualsSignKeyword_1; }
		
		//'Scenario:'
		public Keyword getScenarioKeyword_2() { return cScenarioKeyword_2; }
		
		//name=Title
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_3_0() { return cNameTitleParserRuleCall_3_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_4() { return cEOLTerminalRuleCall_4; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_0() { return cStatementsStatementParserRuleCall_5_0; }
		
		//steps+=Step*
		public Assignment getStepsAssignment_6() { return cStepsAssignment_6; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_6_0() { return cStepsStepParserRuleCall_6_0; }
		
		//examples+=Examples*
		public Assignment getExamplesAssignment_7() { return cExamplesAssignment_7; }
		
		//Examples
		public RuleCall getExamplesExamplesParserRuleCall_7_0() { return cExamplesExamplesParserRuleCall_7_0; }
	}
	public class ExamplesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Examples");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsAbstractScenarioTagsParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExamplesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameTitleParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Assignment cTheExamplesTableAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTheExamplesTableTableParserRuleCall_6_0 = (RuleCall)cTheExamplesTableAssignment_6.eContents().get(0);
		
		//// TODO this is confusing, examples has scenario tags? rename it
		//Examples:
		//    (tags=AbstractScenarioTags)?
		//    '===' 'Examples:' name=Title EOL
		//    statements+=Statement*
		//    theExamplesTable=Table;
		@Override public ParserRule getRule() { return rule; }
		
		//(tags=AbstractScenarioTags)?
		//'===' 'Examples:' name=Title EOL
		//statements+=Statement*
		//theExamplesTable=Table
		public Group getGroup() { return cGroup; }
		
		//(tags=AbstractScenarioTags)?
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }
		
		//AbstractScenarioTags
		public RuleCall getTagsAbstractScenarioTagsParserRuleCall_0_0() { return cTagsAbstractScenarioTagsParserRuleCall_0_0; }
		
		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_1() { return cEqualsSignEqualsSignEqualsSignKeyword_1; }
		
		//'Examples:'
		public Keyword getExamplesKeyword_2() { return cExamplesKeyword_2; }
		
		//name=Title
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_3_0() { return cNameTitleParserRuleCall_3_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_4() { return cEOLTerminalRuleCall_4; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_0() { return cStatementsStatementParserRuleCall_5_0; }
		
		//theExamplesTable=Table
		public Assignment getTheExamplesTableAssignment_6() { return cTheExamplesTableAssignment_6; }
		
		//Table
		public RuleCall getTheExamplesTableTableParserRuleCall_6_0() { return cTheExamplesTableTableParserRuleCall_6_0; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Step");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGivenParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWhenParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cThenParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAndParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Step:
		//    Given | When | Then | And;
		@Override public ParserRule getRule() { return rule; }
		
		//Given | When | Then | And
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Given
		public RuleCall getGivenParserRuleCall_0() { return cGivenParserRuleCall_0; }
		
		//When
		public RuleCall getWhenParserRuleCall_1() { return cWhenParserRuleCall_1; }
		
		//Then
		public RuleCall getThenParserRuleCall_2() { return cThenParserRuleCall_2; }
		
		//And
		public RuleCall getAndParserRuleCall_3() { return cAndParserRuleCall_3; }
	}
	public class GivenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Given");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cGivenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTitleParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTheStepTableAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTheStepTableTableParserRuleCall_4_0_0 = (RuleCall)cTheStepTableAssignment_4_0.eContents().get(0);
		private final Assignment cTheDocStringAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cTheDocStringDocStringParserRuleCall_4_1_0 = (RuleCall)cTheDocStringAssignment_4_1.eContents().get(0);
		
		//Given:
		//    '===' 'Given:' name=Title EOL
		//    (theStepTable=Table | theDocString=DocString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'===' 'Given:' name=Title EOL
		//(theStepTable=Table | theDocString=DocString)?
		public Group getGroup() { return cGroup; }
		
		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignEqualsSignKeyword_0; }
		
		//'Given:'
		public Keyword getGivenKeyword_1() { return cGivenKeyword_1; }
		
		//name=Title
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_2_0() { return cNameTitleParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//(theStepTable=Table | theDocString=DocString)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//theStepTable=Table
		public Assignment getTheStepTableAssignment_4_0() { return cTheStepTableAssignment_4_0; }
		
		//Table
		public RuleCall getTheStepTableTableParserRuleCall_4_0_0() { return cTheStepTableTableParserRuleCall_4_0_0; }
		
		//theDocString=DocString
		public Assignment getTheDocStringAssignment_4_1() { return cTheDocStringAssignment_4_1; }
		
		//DocString
		public RuleCall getTheDocStringDocStringParserRuleCall_4_1_0() { return cTheDocStringDocStringParserRuleCall_4_1_0; }
	}
	public class WhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.When");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTitleParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTheStepTableAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTheStepTableTableParserRuleCall_4_0_0 = (RuleCall)cTheStepTableAssignment_4_0.eContents().get(0);
		private final Assignment cTheDocStringAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cTheDocStringDocStringParserRuleCall_4_1_0 = (RuleCall)cTheDocStringAssignment_4_1.eContents().get(0);
		
		//When:
		//    '===' 'When:' name=Title EOL
		//    (theStepTable=Table | theDocString=DocString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'===' 'When:' name=Title EOL
		//(theStepTable=Table | theDocString=DocString)?
		public Group getGroup() { return cGroup; }
		
		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignEqualsSignKeyword_0; }
		
		//'When:'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
		
		//name=Title
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_2_0() { return cNameTitleParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//(theStepTable=Table | theDocString=DocString)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//theStepTable=Table
		public Assignment getTheStepTableAssignment_4_0() { return cTheStepTableAssignment_4_0; }
		
		//Table
		public RuleCall getTheStepTableTableParserRuleCall_4_0_0() { return cTheStepTableTableParserRuleCall_4_0_0; }
		
		//theDocString=DocString
		public Assignment getTheDocStringAssignment_4_1() { return cTheDocStringAssignment_4_1; }
		
		//DocString
		public RuleCall getTheDocStringDocStringParserRuleCall_4_1_0() { return cTheDocStringDocStringParserRuleCall_4_1_0; }
	}
	public class ThenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Then");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cThenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTitleParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTheStepTableAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTheStepTableTableParserRuleCall_4_0_0 = (RuleCall)cTheStepTableAssignment_4_0.eContents().get(0);
		private final Assignment cTheDocStringAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cTheDocStringDocStringParserRuleCall_4_1_0 = (RuleCall)cTheDocStringAssignment_4_1.eContents().get(0);
		
		//Then:
		//    '===' 'Then:' name=Title EOL
		//    (theStepTable=Table | theDocString=DocString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'===' 'Then:' name=Title EOL
		//(theStepTable=Table | theDocString=DocString)?
		public Group getGroup() { return cGroup; }
		
		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignEqualsSignKeyword_0; }
		
		//'Then:'
		public Keyword getThenKeyword_1() { return cThenKeyword_1; }
		
		//name=Title
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_2_0() { return cNameTitleParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//(theStepTable=Table | theDocString=DocString)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//theStepTable=Table
		public Assignment getTheStepTableAssignment_4_0() { return cTheStepTableAssignment_4_0; }
		
		//Table
		public RuleCall getTheStepTableTableParserRuleCall_4_0_0() { return cTheStepTableTableParserRuleCall_4_0_0; }
		
		//theDocString=DocString
		public Assignment getTheDocStringAssignment_4_1() { return cTheDocStringAssignment_4_1; }
		
		//DocString
		public RuleCall getTheDocStringDocStringParserRuleCall_4_1_0() { return cTheDocStringDocStringParserRuleCall_4_1_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTitleParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTheStepTableAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTheStepTableTableParserRuleCall_4_0_0 = (RuleCall)cTheStepTableAssignment_4_0.eContents().get(0);
		private final Assignment cTheDocStringAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cTheDocStringDocStringParserRuleCall_4_1_0 = (RuleCall)cTheDocStringAssignment_4_1.eContents().get(0);
		
		//And:
		//    '===' 'And:' name=Title EOL
		//    (theStepTable=Table | theDocString=DocString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'===' 'And:' name=Title EOL
		//(theStepTable=Table | theDocString=DocString)?
		public Group getGroup() { return cGroup; }
		
		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignEqualsSignKeyword_0; }
		
		//'And:'
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//name=Title
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_2_0() { return cNameTitleParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//(theStepTable=Table | theDocString=DocString)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//theStepTable=Table
		public Assignment getTheStepTableAssignment_4_0() { return cTheStepTableAssignment_4_0; }
		
		//Table
		public RuleCall getTheStepTableTableParserRuleCall_4_0_0() { return cTheStepTableTableParserRuleCall_4_0_0; }
		
		//theDocString=DocString
		public Assignment getTheDocStringAssignment_4_1() { return cTheDocStringAssignment_4_1; }
		
		//DocString
		public RuleCall getTheDocStringDocStringParserRuleCall_4_1_0() { return cTheDocStringDocStringParserRuleCall_4_1_0; }
	}
	public class DocStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.DocString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameRAWTEXTTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//DocString:
		//    name=RAWTEXT EOL;
		@Override public ParserRule getRule() { return rule; }
		
		//name=RAWTEXT EOL
		public Group getGroup() { return cGroup; }
		
		//name=RAWTEXT
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//RAWTEXT
		public RuleCall getNameRAWTEXTTerminalRuleCall_0_0() { return cNameRAWTEXTTerminalRuleCall_0_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cRowsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRowsRowParserRuleCall_2_0 = (RuleCall)cRowsAssignment_2.eContents().get(0);
		private final Keyword cVerticalLineEqualsSignEqualsSignEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cEOLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Table:
		//    '|===' EOL
		//    rows+=Row+
		//    '|===' EOL;
		@Override public ParserRule getRule() { return rule; }
		
		//'|===' EOL
		//rows+=Row+
		//'|===' EOL
		public Group getGroup() { return cGroup; }
		
		//'|==='
		public Keyword getVerticalLineEqualsSignEqualsSignEqualsSignKeyword_0() { return cVerticalLineEqualsSignEqualsSignEqualsSignKeyword_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }
		
		//rows+=Row+
		public Assignment getRowsAssignment_2() { return cRowsAssignment_2; }
		
		//Row
		public RuleCall getRowsRowParserRuleCall_2_0() { return cRowsRowParserRuleCall_2_0; }
		
		//'|==='
		public Keyword getVerticalLineEqualsSignEqualsSignEqualsSignKeyword_3() { return cVerticalLineEqualsSignEqualsSignEqualsSignKeyword_3; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_4() { return cEOLTerminalRuleCall_4; }
	}
	public class RowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Row");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCellsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCellsCellParserRuleCall_0_0 = (RuleCall)cCellsAssignment_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Row:
		//    cells+=Cell+ EOL;
		@Override public ParserRule getRule() { return rule; }
		
		//cells+=Cell+ EOL
		public Group getGroup() { return cGroup; }
		
		//cells+=Cell+
		public Assignment getCellsAssignment_0() { return cCellsAssignment_0; }
		
		//Cell
		public RuleCall getCellsCellParserRuleCall_0_0() { return cCellsCellParserRuleCall_0_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }
	}
	public class AbstractScenarioTagsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.AbstractScenarioTags");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTagsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameWORDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//AbstractScenarioTags:
		//    '[tags=' name=WORD ']' EOL;
		@Override public ParserRule getRule() { return rule; }
		
		//'[tags=' name=WORD ']' EOL
		public Group getGroup() { return cGroup; }
		
		//'[tags='
		public Keyword getTagsKeyword_0() { return cTagsKeyword_0; }
		
		//name=WORD
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//WORD
		public RuleCall getNameWORDTerminalRuleCall_1_0() { return cNameWORDTerminalRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
	}
	public class CellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Cell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTitleParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Cell:
		//    '|' name=Title;
		@Override public ParserRule getRule() { return rule; }
		
		//'|' name=Title
		public Group getGroup() { return cGroup; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }
		
		//name=Title
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_1_0() { return cNameTitleParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameTitleParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Statement:
		//    name=Title EOL;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Title EOL
		public Group getGroup() { return cGroup; }
		
		//name=Title
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Title
		public RuleCall getNameTitleParserRuleCall_0_0() { return cNameTitleParserRuleCall_0_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }
	}
	public class TitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Title");
		private final RuleCall cWORDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// TODO maybe I don't need Title and can ignore the warnings about it being used in a loop
		//Title:
		//    WORD+;
		@Override public ParserRule getRule() { return rule; }
		
		//WORD+
		public RuleCall getWORDTerminalRuleCall() { return cWORDTerminalRuleCall; }
	}
	
	
	private final ModelElements pModel;
	private final StepObjectElements pStepObject;
	private final StepDefinitionElements pStepDefinition;
	private final StepParametersElements pStepParameters;
	private final FeatureElements pFeature;
	private final AbstractScenarioElements pAbstractScenario;
	private final BackgroundElements pBackground;
	private final ScenarioElements pScenario;
	private final ExamplesElements pExamples;
	private final StepElements pStep;
	private final GivenElements pGiven;
	private final WhenElements pWhen;
	private final ThenElements pThen;
	private final AndElements pAnd;
	private final DocStringElements pDocString;
	private final TableElements pTable;
	private final RowElements pRow;
	private final AbstractScenarioTagsElements pAbstractScenarioTags;
	private final CellElements pCell;
	private final StatementElements pStatement;
	private final TitleElements pTitle;
	private final TerminalRule tWORD;
	private final TerminalRule tWS;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tEOL;
	private final TerminalRule tRAWTEXT;
	
	private final Grammar grammar;

	@Inject
	public SheepDogGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pStepObject = new StepObjectElements();
		this.pStepDefinition = new StepDefinitionElements();
		this.pStepParameters = new StepParametersElements();
		this.pFeature = new FeatureElements();
		this.pAbstractScenario = new AbstractScenarioElements();
		this.pBackground = new BackgroundElements();
		this.pScenario = new ScenarioElements();
		this.pExamples = new ExamplesElements();
		this.pStep = new StepElements();
		this.pGiven = new GivenElements();
		this.pWhen = new WhenElements();
		this.pThen = new ThenElements();
		this.pAnd = new AndElements();
		this.pDocString = new DocStringElements();
		this.pTable = new TableElements();
		this.pRow = new RowElements();
		this.pAbstractScenarioTags = new AbstractScenarioTagsElements();
		this.pCell = new CellElements();
		this.pStatement = new StatementElements();
		this.pTitle = new TitleElements();
		this.tWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.WORD");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.WS");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.SL_COMMENT");
		this.tEOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.EOL");
		this.tRAWTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.RAWTEXT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.farhan.mbt.SheepDog".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//    StepObject | Feature;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//StepObject:
	//    '=' 'Object:' name=Title EOL
	//    statements+=Statement*
	//    stepDefinitions+=StepDefinition*;
	public StepObjectElements getStepObjectAccess() {
		return pStepObject;
	}
	
	public ParserRule getStepObjectRule() {
		return getStepObjectAccess().getRule();
	}
	
	//StepDefinition:
	//    '==' 'Definition:' name=Title EOL
	//    statements+=Statement*
	//    stepParameters+=StepParameters*;
	public StepDefinitionElements getStepDefinitionAccess() {
		return pStepDefinition;
	}
	
	public ParserRule getStepDefinitionRule() {
		return getStepDefinitionAccess().getRule();
	}
	
	//StepParameters:
	//    '===' 'Parameters:' name=Title EOL
	//    statements+=Statement*
	//    parametersTable=Table;
	public StepParametersElements getStepParametersAccess() {
		return pStepParameters;
	}
	
	public ParserRule getStepParametersRule() {
		return getStepParametersAccess().getRule();
	}
	
	//Feature:
	//    '=' 'Feature:' name=Title EOL
	//    statements+=Statement*
	//    abstractScenarios+=AbstractScenario*;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//AbstractScenario:
	//    Background | Scenario;
	public AbstractScenarioElements getAbstractScenarioAccess() {
		return pAbstractScenario;
	}
	
	public ParserRule getAbstractScenarioRule() {
		return getAbstractScenarioAccess().getRule();
	}
	
	//Background:
	//    (tags=AbstractScenarioTags)?
	//    '==' 'Background:' name=Title EOL
	//    statements+=Statement*
	//    steps+=Step*;
	public BackgroundElements getBackgroundAccess() {
		return pBackground;
	}
	
	public ParserRule getBackgroundRule() {
		return getBackgroundAccess().getRule();
	}
	
	//Scenario:
	//    (tags=AbstractScenarioTags)?
	//    '==' 'Scenario:' name=Title EOL
	//    statements+=Statement*
	//    steps+=Step*
	//    examples+=Examples*;
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}
	
	//// TODO this is confusing, examples has scenario tags? rename it
	//Examples:
	//    (tags=AbstractScenarioTags)?
	//    '===' 'Examples:' name=Title EOL
	//    statements+=Statement*
	//    theExamplesTable=Table;
	public ExamplesElements getExamplesAccess() {
		return pExamples;
	}
	
	public ParserRule getExamplesRule() {
		return getExamplesAccess().getRule();
	}
	
	//Step:
	//    Given | When | Then | And;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//Given:
	//    '===' 'Given:' name=Title EOL
	//    (theStepTable=Table | theDocString=DocString)?;
	public GivenElements getGivenAccess() {
		return pGiven;
	}
	
	public ParserRule getGivenRule() {
		return getGivenAccess().getRule();
	}
	
	//When:
	//    '===' 'When:' name=Title EOL
	//    (theStepTable=Table | theDocString=DocString)?;
	public WhenElements getWhenAccess() {
		return pWhen;
	}
	
	public ParserRule getWhenRule() {
		return getWhenAccess().getRule();
	}
	
	//Then:
	//    '===' 'Then:' name=Title EOL
	//    (theStepTable=Table | theDocString=DocString)?;
	public ThenElements getThenAccess() {
		return pThen;
	}
	
	public ParserRule getThenRule() {
		return getThenAccess().getRule();
	}
	
	//And:
	//    '===' 'And:' name=Title EOL
	//    (theStepTable=Table | theDocString=DocString)?;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//DocString:
	//    name=RAWTEXT EOL;
	public DocStringElements getDocStringAccess() {
		return pDocString;
	}
	
	public ParserRule getDocStringRule() {
		return getDocStringAccess().getRule();
	}
	
	//Table:
	//    '|===' EOL
	//    rows+=Row+
	//    '|===' EOL;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//Row:
	//    cells+=Cell+ EOL;
	public RowElements getRowAccess() {
		return pRow;
	}
	
	public ParserRule getRowRule() {
		return getRowAccess().getRule();
	}
	
	//AbstractScenarioTags:
	//    '[tags=' name=WORD ']' EOL;
	public AbstractScenarioTagsElements getAbstractScenarioTagsAccess() {
		return pAbstractScenarioTags;
	}
	
	public ParserRule getAbstractScenarioTagsRule() {
		return getAbstractScenarioTagsAccess().getRule();
	}
	
	//Cell:
	//    '|' name=Title;
	public CellElements getCellAccess() {
		return pCell;
	}
	
	public ParserRule getCellRule() {
		return getCellAccess().getRule();
	}
	
	//Statement:
	//    name=Title EOL;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//// TODO maybe I don't need Title and can ignore the warnings about it being used in a loop
	//Title:
	//    WORD+;
	public TitleElements getTitleAccess() {
		return pTitle;
	}
	
	public ParserRule getTitleRule() {
		return getTitleAccess().getRule();
	}
	
	//// TODO look at fragments to handle escape characters etc instead of this and to handle re-using ' ' | '\t' | '\r' | '\n'
	//terminal WORD:
	//    !(' ' | '\t' | '\r' | '\n' | '[' | ']' | '|' | '#')
	//    !(' ' | '\t' | '\r' | '\n' | '[' | ']')*;
	public TerminalRule getWORDRule() {
		return tWORD;
	}
	
	//terminal WS:
	//    (' ' | '\t' | '\r')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal SL_COMMENT:
	//    '#' !('\n')* EOL;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal EOL:
	//    ('\n')+;
	public TerminalRule getEOLRule() {
		return tEOL;
	}
	
	//terminal RAWTEXT:
	//    '----' '\n' (.)+ '\n' '----';
	public TerminalRule getRAWTEXTRule() {
		return tRAWTEXT;
	}
}
