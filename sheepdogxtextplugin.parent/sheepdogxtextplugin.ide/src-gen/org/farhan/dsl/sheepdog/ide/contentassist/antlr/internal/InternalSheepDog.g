/*
 * generated by Xtext 2.38.0
 */
grammar InternalSheepDog;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.farhan.dsl.sheepdog.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.farhan.dsl.sheepdog.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.farhan.dsl.sheepdog.services.SheepDogGrammarAccess;

}
@parser::members {
	private SheepDogGrammarAccess grammarAccess;

	public void setGrammarAccess(SheepDogGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getAlternatives()); }
		(rule__Model__Alternatives)
		{ after(grammarAccess.getModelAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStepObject
entryRuleStepObject
:
{ before(grammarAccess.getStepObjectRule()); }
	 ruleStepObject
{ after(grammarAccess.getStepObjectRule()); } 
	 EOF 
;

// Rule StepObject
ruleStepObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStepObjectAccess().getGroup()); }
		(rule__StepObject__Group__0)
		{ after(grammarAccess.getStepObjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStepDefinition
entryRuleStepDefinition
:
{ before(grammarAccess.getStepDefinitionRule()); }
	 ruleStepDefinition
{ after(grammarAccess.getStepDefinitionRule()); } 
	 EOF 
;

// Rule StepDefinition
ruleStepDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStepDefinitionAccess().getGroup()); }
		(rule__StepDefinition__Group__0)
		{ after(grammarAccess.getStepDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStepParameters
entryRuleStepParameters
:
{ before(grammarAccess.getStepParametersRule()); }
	 ruleStepParameters
{ after(grammarAccess.getStepParametersRule()); } 
	 EOF 
;

// Rule StepParameters
ruleStepParameters 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStepParametersAccess().getGroup()); }
		(rule__StepParameters__Group__0)
		{ after(grammarAccess.getStepParametersAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestSuite
entryRuleTestSuite
:
{ before(grammarAccess.getTestSuiteRule()); }
	 ruleTestSuite
{ after(grammarAccess.getTestSuiteRule()); } 
	 EOF 
;

// Rule TestSuite
ruleTestSuite 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestSuiteAccess().getGroup()); }
		(rule__TestSuite__Group__0)
		{ after(grammarAccess.getTestSuiteAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestStepContainer
entryRuleTestStepContainer
:
{ before(grammarAccess.getTestStepContainerRule()); }
	 ruleTestStepContainer
{ after(grammarAccess.getTestStepContainerRule()); } 
	 EOF 
;

// Rule TestStepContainer
ruleTestStepContainer 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestStepContainerAccess().getAlternatives()); }
		(rule__TestStepContainer__Alternatives)
		{ after(grammarAccess.getTestStepContainerAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestSetup
entryRuleTestSetup
:
{ before(grammarAccess.getTestSetupRule()); }
	 ruleTestSetup
{ after(grammarAccess.getTestSetupRule()); } 
	 EOF 
;

// Rule TestSetup
ruleTestSetup 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestSetupAccess().getGroup()); }
		(rule__TestSetup__Group__0)
		{ after(grammarAccess.getTestSetupAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestCase
entryRuleTestCase
:
{ before(grammarAccess.getTestCaseRule()); }
	 ruleTestCase
{ after(grammarAccess.getTestCaseRule()); } 
	 EOF 
;

// Rule TestCase
ruleTestCase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestCaseAccess().getGroup()); }
		(rule__TestCase__Group__0)
		{ after(grammarAccess.getTestCaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestData
entryRuleTestData
:
{ before(grammarAccess.getTestDataRule()); }
	 ruleTestData
{ after(grammarAccess.getTestDataRule()); } 
	 EOF 
;

// Rule TestData
ruleTestData 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestDataAccess().getGroup()); }
		(rule__TestData__Group__0)
		{ after(grammarAccess.getTestDataAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestStep
entryRuleTestStep
:
{ before(grammarAccess.getTestStepRule()); }
	 ruleTestStep
{ after(grammarAccess.getTestStepRule()); } 
	 EOF 
;

// Rule TestStep
ruleTestStep 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestStepAccess().getAlternatives()); }
		(rule__TestStep__Alternatives)
		{ after(grammarAccess.getTestStepAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGiven
entryRuleGiven
:
{ before(grammarAccess.getGivenRule()); }
	 ruleGiven
{ after(grammarAccess.getGivenRule()); } 
	 EOF 
;

// Rule Given
ruleGiven 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGivenAccess().getGroup()); }
		(rule__Given__Group__0)
		{ after(grammarAccess.getGivenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhen
entryRuleWhen
:
{ before(grammarAccess.getWhenRule()); }
	 ruleWhen
{ after(grammarAccess.getWhenRule()); } 
	 EOF 
;

// Rule When
ruleWhen 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhenAccess().getGroup()); }
		(rule__When__Group__0)
		{ after(grammarAccess.getWhenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleThen
entryRuleThen
:
{ before(grammarAccess.getThenRule()); }
	 ruleThen
{ after(grammarAccess.getThenRule()); } 
	 EOF 
;

// Rule Then
ruleThen 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getThenAccess().getGroup()); }
		(rule__Then__Group__0)
		{ after(grammarAccess.getThenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd
entryRuleAnd
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAccess().getGroup()); }
		(rule__And__Group__0)
		{ after(grammarAccess.getAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleText
entryRuleText
:
{ before(grammarAccess.getTextRule()); }
	 ruleText
{ after(grammarAccess.getTextRule()); } 
	 EOF 
;

// Rule Text
ruleText 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTextAccess().getGroup()); }
		(rule__Text__Group__0)
		{ after(grammarAccess.getTextAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTable
entryRuleTable
:
{ before(grammarAccess.getTableRule()); }
	 ruleTable
{ after(grammarAccess.getTableRule()); } 
	 EOF 
;

// Rule Table
ruleTable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTableAccess().getGroup()); }
		(rule__Table__Group__0)
		{ after(grammarAccess.getTableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRow
entryRuleRow
:
{ before(grammarAccess.getRowRule()); }
	 ruleRow
{ after(grammarAccess.getRowRule()); } 
	 EOF 
;

// Rule Row
ruleRow 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRowAccess().getGroup()); }
		(rule__Row__Group__0)
		{ after(grammarAccess.getRowAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCell
entryRuleCell
:
{ before(grammarAccess.getCellRule()); }
	 ruleCell
{ after(grammarAccess.getCellRule()); } 
	 EOF 
;

// Rule Cell
ruleCell 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCellAccess().getGroup()); }
		(rule__Cell__Group__0)
		{ after(grammarAccess.getCellAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getGroup()); }
		(rule__Statement__Group__0)
		{ after(grammarAccess.getStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTitle
entryRuleTitle
:
{ before(grammarAccess.getTitleRule()); }
	 ruleTitle
{ after(grammarAccess.getTitleRule()); } 
	 EOF 
;

// Rule Title
ruleTitle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getTitleAccess().getWORDTerminalRuleCall()); }
			(RULE_WORD)
			{ after(grammarAccess.getTitleAccess().getWORDTerminalRuleCall()); }
		)
		(
			{ before(grammarAccess.getTitleAccess().getWORDTerminalRuleCall()); }
			(RULE_WORD)*
			{ after(grammarAccess.getTitleAccess().getWORDTerminalRuleCall()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getStepObjectParserRuleCall_0()); }
		ruleStepObject
		{ after(grammarAccess.getModelAccess().getStepObjectParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getModelAccess().getTestSuiteParserRuleCall_1()); }
		ruleTestSuite
		{ after(grammarAccess.getModelAccess().getTestSuiteParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestStepContainer__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestStepContainerAccess().getTestSetupParserRuleCall_0()); }
		ruleTestSetup
		{ after(grammarAccess.getTestStepContainerAccess().getTestSetupParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTestStepContainerAccess().getTestCaseParserRuleCall_1()); }
		ruleTestCase
		{ after(grammarAccess.getTestStepContainerAccess().getTestCaseParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestStep__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestStepAccess().getGivenParserRuleCall_0()); }
		ruleGiven
		{ after(grammarAccess.getTestStepAccess().getGivenParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTestStepAccess().getWhenParserRuleCall_1()); }
		ruleWhen
		{ after(grammarAccess.getTestStepAccess().getWhenParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTestStepAccess().getThenParserRuleCall_2()); }
		ruleThen
		{ after(grammarAccess.getTestStepAccess().getThenParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getTestStepAccess().getAndParserRuleCall_3()); }
		ruleAnd
		{ after(grammarAccess.getTestStepAccess().getAndParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Given__Alternatives_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGivenAccess().getTableAssignment_4_0()); }
		(rule__Given__TableAssignment_4_0)
		{ after(grammarAccess.getGivenAccess().getTableAssignment_4_0()); }
	)
	|
	(
		{ before(grammarAccess.getGivenAccess().getTextAssignment_4_1()); }
		(rule__Given__TextAssignment_4_1)
		{ after(grammarAccess.getGivenAccess().getTextAssignment_4_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Alternatives_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhenAccess().getTableAssignment_4_0()); }
		(rule__When__TableAssignment_4_0)
		{ after(grammarAccess.getWhenAccess().getTableAssignment_4_0()); }
	)
	|
	(
		{ before(grammarAccess.getWhenAccess().getTextAssignment_4_1()); }
		(rule__When__TextAssignment_4_1)
		{ after(grammarAccess.getWhenAccess().getTextAssignment_4_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Then__Alternatives_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getThenAccess().getTableAssignment_4_0()); }
		(rule__Then__TableAssignment_4_0)
		{ after(grammarAccess.getThenAccess().getTableAssignment_4_0()); }
	)
	|
	(
		{ before(grammarAccess.getThenAccess().getTextAssignment_4_1()); }
		(rule__Then__TextAssignment_4_1)
		{ after(grammarAccess.getThenAccess().getTextAssignment_4_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Alternatives_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getTableAssignment_4_0()); }
		(rule__And__TableAssignment_4_0)
		{ after(grammarAccess.getAndAccess().getTableAssignment_4_0()); }
	)
	|
	(
		{ before(grammarAccess.getAndAccess().getTextAssignment_4_1()); }
		(rule__And__TextAssignment_4_1)
		{ after(grammarAccess.getAndAccess().getTextAssignment_4_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepObject__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepObject__Group__0__Impl
	rule__StepObject__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StepObject__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepObjectAccess().getEqualsSignKeyword_0()); }
	'='
	{ after(grammarAccess.getStepObjectAccess().getEqualsSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepObject__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepObject__Group__1__Impl
	rule__StepObject__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StepObject__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepObjectAccess().getStepObjectKeyword_1()); }
	'Step-Object:'
	{ after(grammarAccess.getStepObjectAccess().getStepObjectKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepObject__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepObject__Group__2__Impl
	rule__StepObject__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StepObject__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepObjectAccess().getNameAssignment_2()); }
	(rule__StepObject__NameAssignment_2)
	{ after(grammarAccess.getStepObjectAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepObject__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepObject__Group__3__Impl
	rule__StepObject__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StepObject__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepObjectAccess().getEOLTerminalRuleCall_3()); }
	RULE_EOL
	{ after(grammarAccess.getStepObjectAccess().getEOLTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepObject__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepObject__Group__4__Impl
	rule__StepObject__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__StepObject__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepObjectAccess().getStatementListAssignment_4()); }
	(rule__StepObject__StatementListAssignment_4)*
	{ after(grammarAccess.getStepObjectAccess().getStatementListAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepObject__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepObject__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StepObject__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepObjectAccess().getStepDefinitionListAssignment_5()); }
	(rule__StepObject__StepDefinitionListAssignment_5)*
	{ after(grammarAccess.getStepObjectAccess().getStepDefinitionListAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StepDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepDefinition__Group__0__Impl
	rule__StepDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StepDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepDefinitionAccess().getEqualsSignEqualsSignKeyword_0()); }
	'=='
	{ after(grammarAccess.getStepDefinitionAccess().getEqualsSignEqualsSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepDefinition__Group__1__Impl
	rule__StepDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StepDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepDefinitionAccess().getStepDefinitionKeyword_1()); }
	'Step-Definition:'
	{ after(grammarAccess.getStepDefinitionAccess().getStepDefinitionKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepDefinition__Group__2__Impl
	rule__StepDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StepDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepDefinitionAccess().getNameAssignment_2()); }
	(rule__StepDefinition__NameAssignment_2)
	{ after(grammarAccess.getStepDefinitionAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepDefinition__Group__3__Impl
	rule__StepDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StepDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepDefinitionAccess().getEOLTerminalRuleCall_3()); }
	RULE_EOL
	{ after(grammarAccess.getStepDefinitionAccess().getEOLTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepDefinition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepDefinition__Group__4__Impl
	rule__StepDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__StepDefinition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepDefinitionAccess().getStatementListAssignment_4()); }
	(rule__StepDefinition__StatementListAssignment_4)*
	{ after(grammarAccess.getStepDefinitionAccess().getStatementListAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepDefinition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepDefinition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StepDefinition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepDefinitionAccess().getStepParameterListAssignment_5()); }
	(rule__StepDefinition__StepParameterListAssignment_5)*
	{ after(grammarAccess.getStepDefinitionAccess().getStepParameterListAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StepParameters__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepParameters__Group__0__Impl
	rule__StepParameters__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StepParameters__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepParametersAccess().getEqualsSignEqualsSignEqualsSignKeyword_0()); }
	'==='
	{ after(grammarAccess.getStepParametersAccess().getEqualsSignEqualsSignEqualsSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepParameters__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepParameters__Group__1__Impl
	rule__StepParameters__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StepParameters__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepParametersAccess().getStepParametersKeyword_1()); }
	'Step-Parameters:'
	{ after(grammarAccess.getStepParametersAccess().getStepParametersKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepParameters__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepParameters__Group__2__Impl
	rule__StepParameters__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StepParameters__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepParametersAccess().getNameAssignment_2()); }
	(rule__StepParameters__NameAssignment_2)
	{ after(grammarAccess.getStepParametersAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepParameters__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepParameters__Group__3__Impl
	rule__StepParameters__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StepParameters__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepParametersAccess().getEOLTerminalRuleCall_3()); }
	RULE_EOL
	{ after(grammarAccess.getStepParametersAccess().getEOLTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepParameters__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepParameters__Group__4__Impl
	rule__StepParameters__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__StepParameters__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepParametersAccess().getStatementListAssignment_4()); }
	(rule__StepParameters__StatementListAssignment_4)*
	{ after(grammarAccess.getStepParametersAccess().getStatementListAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepParameters__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepParameters__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StepParameters__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepParametersAccess().getTableAssignment_5()); }
	(rule__StepParameters__TableAssignment_5)
	{ after(grammarAccess.getStepParametersAccess().getTableAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TestSuite__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestSuite__Group__0__Impl
	rule__TestSuite__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestSuiteAccess().getEqualsSignKeyword_0()); }
	'='
	{ after(grammarAccess.getTestSuiteAccess().getEqualsSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestSuite__Group__1__Impl
	rule__TestSuite__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestSuiteAccess().getTestSuiteKeyword_1()); }
	'Test-Suite:'
	{ after(grammarAccess.getTestSuiteAccess().getTestSuiteKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestSuite__Group__2__Impl
	rule__TestSuite__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestSuiteAccess().getNameAssignment_2()); }
	(rule__TestSuite__NameAssignment_2)
	{ after(grammarAccess.getTestSuiteAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestSuite__Group__3__Impl
	rule__TestSuite__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestSuiteAccess().getEOLTerminalRuleCall_3()); }
	RULE_EOL
	{ after(grammarAccess.getTestSuiteAccess().getEOLTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestSuite__Group__4__Impl
	rule__TestSuite__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestSuiteAccess().getStatementListAssignment_4()); }
	(rule__TestSuite__StatementListAssignment_4)*
	{ after(grammarAccess.getTestSuiteAccess().getStatementListAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestSuite__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestSuiteAccess().getTestStepContainerListAssignment_5()); }
	(rule__TestSuite__TestStepContainerListAssignment_5)*
	{ after(grammarAccess.getTestSuiteAccess().getTestStepContainerListAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TestSetup__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestSetup__Group__0__Impl
	rule__TestSetup__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSetup__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestSetupAccess().getEqualsSignEqualsSignKeyword_0()); }
	'=='
	{ after(grammarAccess.getTestSetupAccess().getEqualsSignEqualsSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSetup__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestSetup__Group__1__Impl
	rule__TestSetup__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSetup__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestSetupAccess().getTestSetupKeyword_1()); }
	'Test-Setup:'
	{ after(grammarAccess.getTestSetupAccess().getTestSetupKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSetup__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestSetup__Group__2__Impl
	rule__TestSetup__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSetup__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestSetupAccess().getNameAssignment_2()); }
	(rule__TestSetup__NameAssignment_2)
	{ after(grammarAccess.getTestSetupAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSetup__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestSetup__Group__3__Impl
	rule__TestSetup__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSetup__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestSetupAccess().getEOLTerminalRuleCall_3()); }
	RULE_EOL
	{ after(grammarAccess.getTestSetupAccess().getEOLTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSetup__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestSetup__Group__4__Impl
	rule__TestSetup__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSetup__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestSetupAccess().getStatementListAssignment_4()); }
	(rule__TestSetup__StatementListAssignment_4)*
	{ after(grammarAccess.getTestSetupAccess().getStatementListAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSetup__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestSetup__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSetup__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestSetupAccess().getTestStepListAssignment_5()); }
	(rule__TestSetup__TestStepListAssignment_5)*
	{ after(grammarAccess.getTestSetupAccess().getTestStepListAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TestCase__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestCase__Group__0__Impl
	rule__TestCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestCaseAccess().getEqualsSignEqualsSignKeyword_0()); }
	'=='
	{ after(grammarAccess.getTestCaseAccess().getEqualsSignEqualsSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestCase__Group__1__Impl
	rule__TestCase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestCaseAccess().getTestCaseKeyword_1()); }
	'Test-Case:'
	{ after(grammarAccess.getTestCaseAccess().getTestCaseKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestCase__Group__2__Impl
	rule__TestCase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestCaseAccess().getNameAssignment_2()); }
	(rule__TestCase__NameAssignment_2)
	{ after(grammarAccess.getTestCaseAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestCase__Group__3__Impl
	rule__TestCase__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestCaseAccess().getEOLTerminalRuleCall_3()); }
	RULE_EOL
	{ after(grammarAccess.getTestCaseAccess().getEOLTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestCase__Group__4__Impl
	rule__TestCase__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestCaseAccess().getStatementListAssignment_4()); }
	(rule__TestCase__StatementListAssignment_4)*
	{ after(grammarAccess.getTestCaseAccess().getStatementListAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestCase__Group__5__Impl
	rule__TestCase__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestCaseAccess().getTestStepListAssignment_5()); }
	(rule__TestCase__TestStepListAssignment_5)*
	{ after(grammarAccess.getTestCaseAccess().getTestStepListAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestCase__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestCaseAccess().getTestDataListAssignment_6()); }
	(rule__TestCase__TestDataListAssignment_6)*
	{ after(grammarAccess.getTestCaseAccess().getTestDataListAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TestData__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestData__Group__0__Impl
	rule__TestData__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestData__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestDataAccess().getEqualsSignEqualsSignEqualsSignKeyword_0()); }
	'==='
	{ after(grammarAccess.getTestDataAccess().getEqualsSignEqualsSignEqualsSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestData__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestData__Group__1__Impl
	rule__TestData__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestData__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestDataAccess().getTestDataKeyword_1()); }
	'Test-Data:'
	{ after(grammarAccess.getTestDataAccess().getTestDataKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestData__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestData__Group__2__Impl
	rule__TestData__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TestData__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestDataAccess().getNameAssignment_2()); }
	(rule__TestData__NameAssignment_2)
	{ after(grammarAccess.getTestDataAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestData__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestData__Group__3__Impl
	rule__TestData__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TestData__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestDataAccess().getEOLTerminalRuleCall_3()); }
	RULE_EOL
	{ after(grammarAccess.getTestDataAccess().getEOLTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestData__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestData__Group__4__Impl
	rule__TestData__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TestData__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestDataAccess().getStatementListAssignment_4()); }
	(rule__TestData__StatementListAssignment_4)*
	{ after(grammarAccess.getTestDataAccess().getStatementListAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestData__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestData__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestData__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestDataAccess().getTableAssignment_5()); }
	(rule__TestData__TableAssignment_5)
	{ after(grammarAccess.getTestDataAccess().getTableAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Given__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Given__Group__0__Impl
	rule__Given__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Given__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGivenAccess().getEqualsSignEqualsSignEqualsSignKeyword_0()); }
	'==='
	{ after(grammarAccess.getGivenAccess().getEqualsSignEqualsSignEqualsSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Given__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Given__Group__1__Impl
	rule__Given__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Given__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGivenAccess().getGivenKeyword_1()); }
	'Given:'
	{ after(grammarAccess.getGivenAccess().getGivenKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Given__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Given__Group__2__Impl
	rule__Given__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Given__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGivenAccess().getNameAssignment_2()); }
	(rule__Given__NameAssignment_2)
	{ after(grammarAccess.getGivenAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Given__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Given__Group__3__Impl
	rule__Given__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Given__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGivenAccess().getEOLTerminalRuleCall_3()); }
	RULE_EOL
	{ after(grammarAccess.getGivenAccess().getEOLTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Given__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Given__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Given__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGivenAccess().getAlternatives_4()); }
	(rule__Given__Alternatives_4)?
	{ after(grammarAccess.getGivenAccess().getAlternatives_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__When__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__0__Impl
	rule__When__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getEqualsSignEqualsSignEqualsSignKeyword_0()); }
	'==='
	{ after(grammarAccess.getWhenAccess().getEqualsSignEqualsSignEqualsSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__1__Impl
	rule__When__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getWhenKeyword_1()); }
	'When:'
	{ after(grammarAccess.getWhenAccess().getWhenKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__2__Impl
	rule__When__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getNameAssignment_2()); }
	(rule__When__NameAssignment_2)
	{ after(grammarAccess.getWhenAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__3__Impl
	rule__When__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getEOLTerminalRuleCall_3()); }
	RULE_EOL
	{ after(grammarAccess.getWhenAccess().getEOLTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getAlternatives_4()); }
	(rule__When__Alternatives_4)?
	{ after(grammarAccess.getWhenAccess().getAlternatives_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Then__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Then__Group__0__Impl
	rule__Then__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Then__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThenAccess().getEqualsSignEqualsSignEqualsSignKeyword_0()); }
	'==='
	{ after(grammarAccess.getThenAccess().getEqualsSignEqualsSignEqualsSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Then__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Then__Group__1__Impl
	rule__Then__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Then__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThenAccess().getThenKeyword_1()); }
	'Then:'
	{ after(grammarAccess.getThenAccess().getThenKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Then__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Then__Group__2__Impl
	rule__Then__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Then__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThenAccess().getNameAssignment_2()); }
	(rule__Then__NameAssignment_2)
	{ after(grammarAccess.getThenAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Then__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Then__Group__3__Impl
	rule__Then__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Then__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThenAccess().getEOLTerminalRuleCall_3()); }
	RULE_EOL
	{ after(grammarAccess.getThenAccess().getEOLTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Then__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Then__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Then__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThenAccess().getAlternatives_4()); }
	(rule__Then__Alternatives_4)?
	{ after(grammarAccess.getThenAccess().getAlternatives_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getEqualsSignEqualsSignEqualsSignKeyword_0()); }
	'==='
	{ after(grammarAccess.getAndAccess().getEqualsSignEqualsSignEqualsSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__1__Impl
	rule__And__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndKeyword_1()); }
	'And:'
	{ after(grammarAccess.getAndAccess().getAndKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__2__Impl
	rule__And__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getNameAssignment_2()); }
	(rule__And__NameAssignment_2)
	{ after(grammarAccess.getAndAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__3__Impl
	rule__And__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getEOLTerminalRuleCall_3()); }
	RULE_EOL
	{ after(grammarAccess.getAndAccess().getEOLTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAlternatives_4()); }
	(rule__And__Alternatives_4)?
	{ after(grammarAccess.getAndAccess().getAlternatives_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Text__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Text__Group__0__Impl
	rule__Text__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Text__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTextAccess().getNameAssignment_0()); }
	(rule__Text__NameAssignment_0)
	{ after(grammarAccess.getTextAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Text__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Text__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Text__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTextAccess().getEOLTerminalRuleCall_1()); }
	RULE_EOL
	{ after(grammarAccess.getTextAccess().getEOLTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Table__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__0__Impl
	rule__Table__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getVerticalLineEqualsSignEqualsSignEqualsSignKeyword_0()); }
	'|==='
	{ after(grammarAccess.getTableAccess().getVerticalLineEqualsSignEqualsSignEqualsSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__1__Impl
	rule__Table__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getEOLTerminalRuleCall_1()); }
	RULE_EOL
	{ after(grammarAccess.getTableAccess().getEOLTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__2__Impl
	rule__Table__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getTableAccess().getRowListAssignment_2()); }
		(rule__Table__RowListAssignment_2)
		{ after(grammarAccess.getTableAccess().getRowListAssignment_2()); }
	)
	(
		{ before(grammarAccess.getTableAccess().getRowListAssignment_2()); }
		(rule__Table__RowListAssignment_2)*
		{ after(grammarAccess.getTableAccess().getRowListAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__3__Impl
	rule__Table__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getVerticalLineEqualsSignEqualsSignEqualsSignKeyword_3()); }
	'|==='
	{ after(grammarAccess.getTableAccess().getVerticalLineEqualsSignEqualsSignEqualsSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getEOLTerminalRuleCall_4()); }
	RULE_EOL
	{ after(grammarAccess.getTableAccess().getEOLTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Row__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group__0__Impl
	rule__Row__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getRowAccess().getCellListAssignment_0()); }
		(rule__Row__CellListAssignment_0)
		{ after(grammarAccess.getRowAccess().getCellListAssignment_0()); }
	)
	(
		{ before(grammarAccess.getRowAccess().getCellListAssignment_0()); }
		(rule__Row__CellListAssignment_0)*
		{ after(grammarAccess.getRowAccess().getCellListAssignment_0()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getEOLTerminalRuleCall_1()); }
	RULE_EOL
	{ after(grammarAccess.getRowAccess().getEOLTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Cell__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cell__Group__0__Impl
	rule__Cell__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellAccess().getVerticalLineKeyword_0()); }
	'|'
	{ after(grammarAccess.getCellAccess().getVerticalLineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cell__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellAccess().getNameAssignment_1()); }
	(rule__Cell__NameAssignment_1)
	{ after(grammarAccess.getCellAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group__0__Impl
	rule__Statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getNameAssignment_0()); }
	(rule__Statement__NameAssignment_0)
	{ after(grammarAccess.getStatementAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getEOLTerminalRuleCall_1()); }
	RULE_EOL
	{ after(grammarAccess.getStatementAccess().getEOLTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StepObject__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepObjectAccess().getNameTitleParserRuleCall_2_0()); }
		ruleTitle
		{ after(grammarAccess.getStepObjectAccess().getNameTitleParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepObject__StatementListAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepObjectAccess().getStatementListStatementParserRuleCall_4_0()); }
		ruleStatement
		{ after(grammarAccess.getStepObjectAccess().getStatementListStatementParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepObject__StepDefinitionListAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepObjectAccess().getStepDefinitionListStepDefinitionParserRuleCall_5_0()); }
		ruleStepDefinition
		{ after(grammarAccess.getStepObjectAccess().getStepDefinitionListStepDefinitionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepDefinition__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepDefinitionAccess().getNameTitleParserRuleCall_2_0()); }
		ruleTitle
		{ after(grammarAccess.getStepDefinitionAccess().getNameTitleParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepDefinition__StatementListAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepDefinitionAccess().getStatementListStatementParserRuleCall_4_0()); }
		ruleStatement
		{ after(grammarAccess.getStepDefinitionAccess().getStatementListStatementParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepDefinition__StepParameterListAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepDefinitionAccess().getStepParameterListStepParametersParserRuleCall_5_0()); }
		ruleStepParameters
		{ after(grammarAccess.getStepDefinitionAccess().getStepParameterListStepParametersParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepParameters__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepParametersAccess().getNameTitleParserRuleCall_2_0()); }
		ruleTitle
		{ after(grammarAccess.getStepParametersAccess().getNameTitleParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepParameters__StatementListAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepParametersAccess().getStatementListStatementParserRuleCall_4_0()); }
		ruleStatement
		{ after(grammarAccess.getStepParametersAccess().getStatementListStatementParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepParameters__TableAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepParametersAccess().getTableTableParserRuleCall_5_0()); }
		ruleTable
		{ after(grammarAccess.getStepParametersAccess().getTableTableParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestSuiteAccess().getNameTitleParserRuleCall_2_0()); }
		ruleTitle
		{ after(grammarAccess.getTestSuiteAccess().getNameTitleParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__StatementListAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestSuiteAccess().getStatementListStatementParserRuleCall_4_0()); }
		ruleStatement
		{ after(grammarAccess.getTestSuiteAccess().getStatementListStatementParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__TestStepContainerListAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestSuiteAccess().getTestStepContainerListTestStepContainerParserRuleCall_5_0()); }
		ruleTestStepContainer
		{ after(grammarAccess.getTestSuiteAccess().getTestStepContainerListTestStepContainerParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSetup__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestSetupAccess().getNameTitleParserRuleCall_2_0()); }
		ruleTitle
		{ after(grammarAccess.getTestSetupAccess().getNameTitleParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSetup__StatementListAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestSetupAccess().getStatementListStatementParserRuleCall_4_0()); }
		ruleStatement
		{ after(grammarAccess.getTestSetupAccess().getStatementListStatementParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSetup__TestStepListAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestSetupAccess().getTestStepListTestStepParserRuleCall_5_0()); }
		ruleTestStep
		{ after(grammarAccess.getTestSetupAccess().getTestStepListTestStepParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestCaseAccess().getNameTitleParserRuleCall_2_0()); }
		ruleTitle
		{ after(grammarAccess.getTestCaseAccess().getNameTitleParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__StatementListAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestCaseAccess().getStatementListStatementParserRuleCall_4_0()); }
		ruleStatement
		{ after(grammarAccess.getTestCaseAccess().getStatementListStatementParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__TestStepListAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestCaseAccess().getTestStepListTestStepParserRuleCall_5_0()); }
		ruleTestStep
		{ after(grammarAccess.getTestCaseAccess().getTestStepListTestStepParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__TestDataListAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestCaseAccess().getTestDataListTestDataParserRuleCall_6_0()); }
		ruleTestData
		{ after(grammarAccess.getTestCaseAccess().getTestDataListTestDataParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestData__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestDataAccess().getNameTitleParserRuleCall_2_0()); }
		ruleTitle
		{ after(grammarAccess.getTestDataAccess().getNameTitleParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestData__StatementListAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestDataAccess().getStatementListStatementParserRuleCall_4_0()); }
		ruleStatement
		{ after(grammarAccess.getTestDataAccess().getStatementListStatementParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestData__TableAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestDataAccess().getTableTableParserRuleCall_5_0()); }
		ruleTable
		{ after(grammarAccess.getTestDataAccess().getTableTableParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Given__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGivenAccess().getNameTitleParserRuleCall_2_0()); }
		ruleTitle
		{ after(grammarAccess.getGivenAccess().getNameTitleParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Given__TableAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGivenAccess().getTableTableParserRuleCall_4_0_0()); }
		ruleTable
		{ after(grammarAccess.getGivenAccess().getTableTableParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Given__TextAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGivenAccess().getTextTextParserRuleCall_4_1_0()); }
		ruleText
		{ after(grammarAccess.getGivenAccess().getTextTextParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhenAccess().getNameTitleParserRuleCall_2_0()); }
		ruleTitle
		{ after(grammarAccess.getWhenAccess().getNameTitleParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__TableAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhenAccess().getTableTableParserRuleCall_4_0_0()); }
		ruleTable
		{ after(grammarAccess.getWhenAccess().getTableTableParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__TextAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhenAccess().getTextTextParserRuleCall_4_1_0()); }
		ruleText
		{ after(grammarAccess.getWhenAccess().getTextTextParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Then__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getThenAccess().getNameTitleParserRuleCall_2_0()); }
		ruleTitle
		{ after(grammarAccess.getThenAccess().getNameTitleParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Then__TableAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getThenAccess().getTableTableParserRuleCall_4_0_0()); }
		ruleTable
		{ after(grammarAccess.getThenAccess().getTableTableParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Then__TextAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getThenAccess().getTextTextParserRuleCall_4_1_0()); }
		ruleText
		{ after(grammarAccess.getThenAccess().getTextTextParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getNameTitleParserRuleCall_2_0()); }
		ruleTitle
		{ after(grammarAccess.getAndAccess().getNameTitleParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__TableAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getTableTableParserRuleCall_4_0_0()); }
		ruleTable
		{ after(grammarAccess.getAndAccess().getTableTableParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__TextAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getTextTextParserRuleCall_4_1_0()); }
		ruleText
		{ after(grammarAccess.getAndAccess().getTextTextParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Text__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTextAccess().getNameRAWTEXTTerminalRuleCall_0_0()); }
		RULE_RAWTEXT
		{ after(grammarAccess.getTextAccess().getNameRAWTEXTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__RowListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getRowListRowParserRuleCall_2_0()); }
		ruleRow
		{ after(grammarAccess.getTableAccess().getRowListRowParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__CellListAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRowAccess().getCellListCellParserRuleCall_0_0()); }
		ruleCell
		{ after(grammarAccess.getRowAccess().getCellListCellParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCellAccess().getNameTitleParserRuleCall_1_0()); }
		ruleTitle
		{ after(grammarAccess.getCellAccess().getNameTitleParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getNameTitleParserRuleCall_0_0()); }
		ruleTitle
		{ after(grammarAccess.getStatementAccess().getNameTitleParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_WORD : ~((' '|'\t'|'\r'|'\n'|'['|']'|'|'|'#')) ~((' '|'\t'|'\r'|'\n'|'['|']'))*;

RULE_WS : (' '|'\t'|'\r')+;

RULE_SL_COMMENT : '#' ~('\n')* RULE_EOL;

RULE_EOL : '\n'+;

RULE_RAWTEXT : '----' '\n' .+ '\n' '----';
