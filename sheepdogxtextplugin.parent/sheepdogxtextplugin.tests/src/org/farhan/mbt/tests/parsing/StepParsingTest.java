/*
 * generated by Xtext 2.32.0
 */
package org.farhan.mbt.tests.parsing;

import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.farhan.mbt.tests.SheepDogInjectorProvider;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(SheepDogInjectorProvider.class)
public class StepParsingTest extends ParsingTest {

	@Test
	public void parseStepWithName() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("= Test-Suite: This is a test feature\n");
		sb.append("== Test-Case: Submit a drug claim\n");
		sb.append("=== Given: do step one\n");
		sb.append("=== When: do step three\n");
		sb.append("=== Then: do step four\n");
		sb.append("=== And: do step two\n");
		assertNoFeatureErrors(sb);
	}

	@Test
	public void parseStepWithoutName() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("= Test-Suite: This is a test feature\n");
		sb.append("== Test-Case: Submit a drug claim\n");
		sb.append("=== Given:\n");
		assertFeatureErrors(sb);
	}

	@Test
	public void parseStepWithoutNameEOL() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("= Test-Suite: This is a test feature\n");
		sb.append("== Test-Case: Submit a drug claim\n");
		sb.append("=== Given: do step one");
		assertFeatureErrors(sb);
	}

	@Test
	public void parseStepWithTable() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("= Test-Suite: This is a test feature\n");
		sb.append("== Test-Case: Submit a drug claim\n");
		sb.append("=== Given: do step one\n");

		sb.append("|===\n");
		sb.append("| Header1 | Header2 \n");
		sb.append("|===\n");
		assertNoFeatureErrors(sb);
	}

	@Test
	public void parseStepWithMultirowTable() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("= Test-Suite: This is a test feature\n");
		sb.append("== Test-Case: Submit a drug claim\n");
		sb.append("=== Given: do step one\n");

		sb.append("|===\n");
		sb.append("| Header1 | Header2 \n");
		sb.append("|   data1 |   data2 \n");
		sb.append("|===\n");
		assertNoFeatureErrors(sb);
	}

	@Test
	public void parseStepWithoutTableEOL() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("= Test-Suite: This is a test feature\n");
		sb.append("== Test-Case: Submit a drug claim\n");
		sb.append("=== Given: do step one\n");

		sb.append("|===\n");
		sb.append("| Header1 | Header2");
		sb.append("|===\n");
		assertFeatureErrors(sb);
	}
	
	@Test
	public void parseStepWithTableEscape() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("= Test-Suite: This\n");
		sb.append("== Test-Case: Submit\n");
		sb.append("=== Given: do\n");

		sb.append("|===\n");
		sb.append("| Suggestion | Suggestion Name\n");
		sb.append("| \\| H1 \\| | \\| H1 \\|\n");
		sb.append("|===\n");
		assertNoFeatureErrors(sb);
	}

	@Test
	public void parseStepWithDocString() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("= Test-Suite: This is a test feature\n");
		sb.append("== Test-Case: Submit a drug claim\n");
		sb.append("=== Given: do step one\n");
		sb.append("----\n");
		sb.append("Line1\n");
		sb.append("----\n");
		assertNoFeatureErrors(sb);
	}
	
	@Test
	public void parseStepWithDocStringEscape() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("= Test-Suite: This is a test feature\n");
		sb.append("== Test-Case: Submit a drug claim\n");
		sb.append("=== Given: do step one\n");
		sb.append("----\n");
		sb.append("Line1\n");
		sb.append("----\n");
		assertNoFeatureErrors(sb);
	}

	@Test
	public void parseStepWithMultilineDocString() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("= Test-Suite: This is a test feature\n");
		sb.append("== Test-Case: Submit a drug claim\n");
		sb.append("=== Given: do step one\n");
		sb.append("----\n");
		sb.append("Line1\n");
		sb.append("Line2\n\n\n");
		sb.append("Line3\n\n");
		sb.append("----\n");
		assertNoFeatureErrors(sb);
	}

	@Test
	public void parseStepWithoutDocStringEOL() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("= Test-Suite: This is a test feature\n");
		sb.append("== Test-Case: Submit a drug claim\n");
		sb.append("=== Given: do step one\n");
		sb.append("----\n");
		sb.append("Line1");
		sb.append("----\n");
		assertFeatureErrors(sb);
	}

	@Test
	public void parseStepWithDocStringEmpty() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("= Test-Suite: This is a test feature\n");
		sb.append("== Test-Case: Submit a drug claim\n");
		sb.append("=== Given: do step one\n");
		sb.append("----\n");
		sb.append("----\n");
		assertFeatureErrors(sb);
	}

	// @Test
	// Temporarily commenting out this test. In this test, the test just hangs but
	// when testing in Eclipse it doesn't
	public void parseStepWithDocStringIncomplete() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("= Test-Suite: This is a test feature\n");
		sb.append("== Test-Case: Submit a drug claim\n");
		sb.append("=== Given: do step one\n");
		sb.append("----\n");
		assertFeatureErrors(sb);
	}

	@Test
	public void parseStepWithEverything() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("= Test-Suite: This is a test feature\n");
		sb.append("== Test-Case: Submit a drug claim\n");
		sb.append("=== Given: do step one\n");

		sb.append("|===\n");
		sb.append("| Header1 | Header2 \n");
		sb.append("|   data1 |   data2 \n");
		sb.append("|===\n");
		sb.append("=== When: do step three\n");

		sb.append("|===\n");
		sb.append("| Header1 | Header2 \n");
		sb.append("|   data1 |   data2 \n");
		sb.append("|===\n");
		sb.append("=== Then: do step four\n");

		sb.append("|===\n");
		sb.append("| Header1 | Header2 \n");
		sb.append("|   data1 |   data2 \n");
		sb.append("|===\n");
		sb.append("=== And: do step two\n");

		sb.append("|===\n");
		sb.append("| Header1 | Header2 \n");
		sb.append("|   data1 |   data2 \n");
		sb.append("|===\n");
		sb.append("=== Given: do step one\n");
		sb.append("----\n");
		sb.append("Line1\n");
		sb.append("----\n");
		sb.append("=== When: do step three\n");
		sb.append("----\n");
		sb.append("Line1\n");
		sb.append("----\n");
		sb.append("=== Then: do step four\n");
		sb.append("----\n");
		sb.append("Line1\n");
		sb.append("----\n");
		sb.append("=== And: do step two\n");
		sb.append("----\n");
		sb.append("Line1\n");
		sb.append("----\n");
		assertNoFeatureErrors(sb);
	}
}
