/*
 * generated by Xtext 2.36.0
 */
package org.farhan.dsl.sheepdog.ui.contentassist;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Map.Entry;

import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.farhan.dsl.common.*;
import org.farhan.dsl.sheepdog.LanguageAccessImpl;
import org.farhan.dsl.sheepdog.sheepDog.And;
import org.farhan.dsl.sheepdog.sheepDog.Given;
import org.farhan.dsl.sheepdog.sheepDog.Row;
import org.farhan.dsl.sheepdog.sheepDog.TestStep;
import org.farhan.dsl.sheepdog.sheepDog.Text;
import org.farhan.dsl.sheepdog.sheepDog.Table;
import org.farhan.dsl.sheepdog.sheepDog.Then;
import org.farhan.dsl.sheepdog.sheepDog.When;

/**
 * See
 * https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 */
public class SheepDogProposalProvider extends AbstractSheepDogProposalProvider {

	public void completeAnd_Name(And step, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeAnd_Name(step, assignment, context, acceptor);
		completeName(step, assignment, context, acceptor);
	}

	public void completeAnd_Table(And step, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeAnd_Table(step, assignment, context, acceptor);
		completeStepParameters(step, assignment, context, acceptor);
	}

	public void completeAnd_Text(And step, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeAnd_Text(step, assignment, context, acceptor);
		completeStepParameters(step, assignment, context, acceptor);
	}

	public void completeGiven_Name(Given step, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeGiven_Name(step, assignment, context, acceptor);
		completeName(step, assignment, context, acceptor);
	}

	public void completeGiven_Table(Given step, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeGiven_Table(step, assignment, context, acceptor);
		completeStepParameters(step, assignment, context, acceptor);
	}

	public void completeGiven_Text(Given step, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeGiven_Text(step, assignment, context, acceptor);
		completeStepParameters(step, assignment, context, acceptor);
	}

	private void completeName(TestStep step, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		try {
			for (Entry<String, Proposal> p : LanguageHelper.proposeTestStepName(new LanguageAccessImpl(step))
					.entrySet()) {
				ConfigurableCompletionProposal proposal = (ConfigurableCompletionProposal) createCompletionProposal(
						p.getValue().getReplacement(), p.getValue().getDisplay(), null, context);
				if (proposal != null) {
					proposal.setAdditionalProposalInfo(p.getValue().getDocumentation());
					acceptor.accept(proposal);
				}
			}
		} catch (Exception e) {
			logError(e, step.getName());
		}
	}

	public void completeRow_Cells(Row row, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		// TODO if it's the first row, suggest a name based on all names used in the
		// step definition parameters for this step definition
	}

	private void completeStepParameters(TestStep step, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		try {
			for (Entry<String, Proposal> p : LanguageHelper.proposeStepParameters(new LanguageAccessImpl(step))
					.entrySet()) {
				// TODO this is an ugly hack to make the proposals work. The |=== and ----
				// shouldn't be hard-coded here. Move them into the languageAccessImpl class
				String replacement;
				if (p.getValue().getReplacement().contentEquals(LanguageAccessImpl.STEP_PARAMETER_TEXT)) {
					replacement = "----\n" + "todo" + "\n----";
				} else {
					replacement = "|===\n" + p.getValue().getReplacement() + "\n|===";
				}
				ConfigurableCompletionProposal proposal = (ConfigurableCompletionProposal) createCompletionProposal(
						replacement, p.getValue().getDisplay(), null, context);
				if (proposal != null) {
					proposal.setAdditionalProposalInfo(p.getValue().getDocumentation());
					acceptor.accept(proposal);
				}
			}
		} catch (Exception e) {
			logError(e, step.getName());
		}
	}

	public void completeStepTable_Rows(Table stepTable, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		// TODO automatically create columns to match header
	}

	public void completeText_Name(Text model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
	}

	public void completeThen_Name(Then step, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeThen_Name(step, assignment, context, acceptor);
		completeName(step, assignment, context, acceptor);
	}

	public void completeThen_Table(Then step, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeThen_Table(step, assignment, context, acceptor);
		completeStepParameters(step, assignment, context, acceptor);
	}

	public void completeThen_Text(Then step, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeThen_Text(step, assignment, context, acceptor);
		completeStepParameters(step, assignment, context, acceptor);
	}

	public void completeWhen_Name(When step, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeWhen_Name(step, assignment, context, acceptor);
		completeName(step, assignment, context, acceptor);
	}

	public void completeWhen_Table(When step, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeWhen_Table(step, assignment, context, acceptor);
		completeStepParameters(step, assignment, context, acceptor);
	}

	public void completeWhen_Text(When step, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeWhen_Text(step, assignment, context, acceptor);
		completeStepParameters(step, assignment, context, acceptor);
	}

	private void logError(Exception e, String name) {
		// TODO inject the logger instead
		System.out.println("There was an error listing proposals for: " + name);
		StringWriter sw = new StringWriter();
		e.printStackTrace(new PrintWriter(sw));
		System.out.println(sw.toString());
	}
}
